/*
AMSVR Broker API

# Introductie     Voor u heeft u de online documentatie van de AMSVR Broker API. Omdat het een Nederlands domein      betreft worden er Engelse en Nederlandse terminologie door elkaar heen gebruikt.  Liefhebbers van de Swagger UI kunnen [hier terecht](/swagger-ui). Daarnaast is de API eveneens beschikbaar in de op endpoint niveau zoals bijvoorbeeld [hier](/api/aansluitingen).  ##        

API version: release-0.6.14
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package broker

import (
	"encoding/json"
	"fmt"
)

// StoringscodesEnum the model 'StoringscodesEnum'
type StoringscodesEnum string

// List of StoringscodesEnum
const (
	STORINGSCODESENUM_GEEN StoringscodesEnum = "geen"
	STORINGSCODESENUM_BMC StoringscodesEnum = "bmc"
	STORINGSCODESENUM_SMC StoringscodesEnum = "smc"
	STORINGSCODESENUM_GDC StoringscodesEnum = "gdc"
	STORINGSCODESENUM_PZI StoringscodesEnum = "pzi"
	STORINGSCODESENUM_BLUSCENTRALE StoringscodesEnum = "bluscentrale"
	STORINGSCODESENUM_RAW_INSTALLATIE StoringscodesEnum = "raw_installatie"
)

// All allowed values of StoringscodesEnum enum
var AllowedStoringscodesEnumEnumValues = []StoringscodesEnum{
	"geen",
	"bmc",
	"smc",
	"gdc",
	"pzi",
	"bluscentrale",
	"raw_installatie",
}

func (v *StoringscodesEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StoringscodesEnum(value)
	for _, existing := range AllowedStoringscodesEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StoringscodesEnum", value)
}

// NewStoringscodesEnumFromValue returns a pointer to a valid StoringscodesEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStoringscodesEnumFromValue(v string) (*StoringscodesEnum, error) {
	ev := StoringscodesEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StoringscodesEnum: valid values are %v", v, AllowedStoringscodesEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StoringscodesEnum) IsValid() bool {
	for _, existing := range AllowedStoringscodesEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StoringscodesEnum value
func (v StoringscodesEnum) Ptr() *StoringscodesEnum {
	return &v
}

type NullableStoringscodesEnum struct {
	value *StoringscodesEnum
	isSet bool
}

func (v NullableStoringscodesEnum) Get() *StoringscodesEnum {
	return v.value
}

func (v *NullableStoringscodesEnum) Set(val *StoringscodesEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableStoringscodesEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableStoringscodesEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoringscodesEnum(val *StoringscodesEnum) *NullableStoringscodesEnum {
	return &NullableStoringscodesEnum{value: val, isSet: true}
}

func (v NullableStoringscodesEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoringscodesEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

