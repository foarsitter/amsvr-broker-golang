/*
AMSVR Broker API

# Introductie     Voor u heeft u de online documentatie van de AMSVR Broker API. Omdat het een Nederlands domein      betreft worden er Engelse en Nederlandse terminologie door elkaar heen gebruikt.  Liefhebbers van de Swagger UI kunnen [hier terecht](/swagger-ui). Daarnaast is de API eveneens beschikbaar in de op endpoint niveau zoals bijvoorbeeld [hier](/api/aansluitingen).  ##        

API version: release-0.6.14
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package broker

import (
	"encoding/json"
	"fmt"
)

// PrioEnum the model 'PrioEnum'
type PrioEnum int32

// List of PrioEnum
const (
	PRIOENUM__0 PrioEnum = 0
	PRIOENUM__1 PrioEnum = 1
	PRIOENUM__2 PrioEnum = 2
	PRIOENUM__3 PrioEnum = 3
	PRIOENUM__4 PrioEnum = 4
)

// All allowed values of PrioEnum enum
var AllowedPrioEnumEnumValues = []PrioEnum{
	0,
	1,
	2,
	3,
	4,
}

func (v *PrioEnum) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrioEnum(value)
	for _, existing := range AllowedPrioEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PrioEnum", value)
}

// NewPrioEnumFromValue returns a pointer to a valid PrioEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrioEnumFromValue(v int32) (*PrioEnum, error) {
	ev := PrioEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PrioEnum: valid values are %v", v, AllowedPrioEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrioEnum) IsValid() bool {
	for _, existing := range AllowedPrioEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PrioEnum value
func (v PrioEnum) Ptr() *PrioEnum {
	return &v
}

type NullablePrioEnum struct {
	value *PrioEnum
	isSet bool
}

func (v NullablePrioEnum) Get() *PrioEnum {
	return v.value
}

func (v *NullablePrioEnum) Set(val *PrioEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePrioEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePrioEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrioEnum(val *PrioEnum) *NullablePrioEnum {
	return &NullablePrioEnum{value: val, isSet: true}
}

func (v NullablePrioEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrioEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

