/*
AMSVR Broker API

# Introductie     Voor u heeft u de online documentatie van de AMSVR Broker API. Omdat het een Nederlands domein      betreft worden er Engelse en Nederlandse terminologie door elkaar heen gebruikt.  Liefhebbers van de Swagger UI kunnen [hier terecht](/swagger-ui). Daarnaast is de API eveneens beschikbaar in de op endpoint niveau zoals bijvoorbeeld [hier](/api/aansluitingen).  ##        

API version: release-0.6.14
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package broker

import (
	"encoding/json"
	"fmt"
)

// BronEnum the model 'BronEnum'
type BronEnum string

// List of BronEnum
const (
	BRONENUM_IMPORT BronEnum = "import"
	BRONENUM_NIEUW BronEnum = "nieuw"
	BRONENUM_MIGRATIE BronEnum = "migratie"
	BRONENUM_API BronEnum = "api"
)

// All allowed values of BronEnum enum
var AllowedBronEnumEnumValues = []BronEnum{
	"import",
	"nieuw",
	"migratie",
	"api",
}

func (v *BronEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BronEnum(value)
	for _, existing := range AllowedBronEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BronEnum", value)
}

// NewBronEnumFromValue returns a pointer to a valid BronEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBronEnumFromValue(v string) (*BronEnum, error) {
	ev := BronEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BronEnum: valid values are %v", v, AllowedBronEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BronEnum) IsValid() bool {
	for _, existing := range AllowedBronEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BronEnum value
func (v BronEnum) Ptr() *BronEnum {
	return &v
}

type NullableBronEnum struct {
	value *BronEnum
	isSet bool
}

func (v NullableBronEnum) Get() *BronEnum {
	return v.value
}

func (v *NullableBronEnum) Set(val *BronEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableBronEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableBronEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBronEnum(val *BronEnum) *NullableBronEnum {
	return &NullableBronEnum{value: val, isSet: true}
}

func (v NullableBronEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBronEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

