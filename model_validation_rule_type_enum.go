/*
AMSVR Broker API

# Introductie     Voor u heeft u de online documentatie van de AMSVR Broker API. Omdat het een Nederlands domein      betreft worden er Engelse en Nederlandse terminologie door elkaar heen gebruikt.  Liefhebbers van de Swagger UI kunnen [hier terecht](/swagger-ui). Daarnaast is de API eveneens beschikbaar in de op endpoint niveau zoals bijvoorbeeld [hier](/api/aansluitingen).  ##        

API version: release-0.6.14
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package broker

import (
	"encoding/json"
	"fmt"
)

// ValidationRuleTypeEnum the model 'ValidationRuleTypeEnum'
type ValidationRuleTypeEnum string

// List of ValidationRuleTypeEnum
const (
	VALIDATIONRULETYPEENUM_WAARSCHUWINGEN ValidationRuleTypeEnum = "waarschuwingen"
	VALIDATIONRULETYPEENUM_FOUTMELDING ValidationRuleTypeEnum = "foutmelding"
)

// All allowed values of ValidationRuleTypeEnum enum
var AllowedValidationRuleTypeEnumEnumValues = []ValidationRuleTypeEnum{
	"waarschuwingen",
	"foutmelding",
}

func (v *ValidationRuleTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ValidationRuleTypeEnum(value)
	for _, existing := range AllowedValidationRuleTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ValidationRuleTypeEnum", value)
}

// NewValidationRuleTypeEnumFromValue returns a pointer to a valid ValidationRuleTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewValidationRuleTypeEnumFromValue(v string) (*ValidationRuleTypeEnum, error) {
	ev := ValidationRuleTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ValidationRuleTypeEnum: valid values are %v", v, AllowedValidationRuleTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ValidationRuleTypeEnum) IsValid() bool {
	for _, existing := range AllowedValidationRuleTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ValidationRuleTypeEnum value
func (v ValidationRuleTypeEnum) Ptr() *ValidationRuleTypeEnum {
	return &v
}

type NullableValidationRuleTypeEnum struct {
	value *ValidationRuleTypeEnum
	isSet bool
}

func (v NullableValidationRuleTypeEnum) Get() *ValidationRuleTypeEnum {
	return v.value
}

func (v *NullableValidationRuleTypeEnum) Set(val *ValidationRuleTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationRuleTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationRuleTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationRuleTypeEnum(val *ValidationRuleTypeEnum) *NullableValidationRuleTypeEnum {
	return &NullableValidationRuleTypeEnum{value: val, isSet: true}
}

func (v NullableValidationRuleTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationRuleTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

