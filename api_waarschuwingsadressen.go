/*
AMSVR Broker API

# Introductie     Voor u heeft u de online documentatie van de AMSVR Broker API. Omdat het een Nederlands domein      betreft worden er Engelse en Nederlandse terminologie door elkaar heen gebruikt.  Liefhebbers van de Swagger UI kunnen [hier terecht](/swagger-ui). Daarnaast is de API eveneens beschikbaar in de op endpoint niveau zoals bijvoorbeeld [hier](/api/aansluitingen).  ##        

API version: release-0.6.14
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package broker

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// WaarschuwingsadressenApiService WaarschuwingsadressenApi service
type WaarschuwingsadressenApiService service

type ApiAansluitingenSectorenWaarschuwingsadressenCreateRequest struct {
	ctx context.Context
	ApiService *WaarschuwingsadressenApiService
	id int32
	waarschuwingsadresRequest *WaarschuwingsadresRequest
}

func (r ApiAansluitingenSectorenWaarschuwingsadressenCreateRequest) WaarschuwingsadresRequest(waarschuwingsadresRequest WaarschuwingsadresRequest) ApiAansluitingenSectorenWaarschuwingsadressenCreateRequest {
	r.waarschuwingsadresRequest = &waarschuwingsadresRequest
	return r
}

func (r ApiAansluitingenSectorenWaarschuwingsadressenCreateRequest) Execute() (*Waarschuwingsadres, *http.Response, error) {
	return r.ApiService.AansluitingenSectorenWaarschuwingsadressenCreateExecute(r)
}

/*
AansluitingenSectorenWaarschuwingsadressenCreate Method for AansluitingenSectorenWaarschuwingsadressenCreate

Waarschuwingsadres toevoegen

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAansluitingenSectorenWaarschuwingsadressenCreateRequest
*/
func (a *WaarschuwingsadressenApiService) AansluitingenSectorenWaarschuwingsadressenCreate(ctx context.Context, id int32) ApiAansluitingenSectorenWaarschuwingsadressenCreateRequest {
	return ApiAansluitingenSectorenWaarschuwingsadressenCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Waarschuwingsadres
func (a *WaarschuwingsadressenApiService) AansluitingenSectorenWaarschuwingsadressenCreateExecute(r ApiAansluitingenSectorenWaarschuwingsadressenCreateRequest) (*Waarschuwingsadres, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Waarschuwingsadres
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WaarschuwingsadressenApiService.AansluitingenSectorenWaarschuwingsadressenCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/aansluitingen/sectoren/{id}/waarschuwingsadressen"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.waarschuwingsadresRequest == nil {
		return localVarReturnValue, nil, reportError("waarschuwingsadresRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.waarschuwingsadresRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAansluitingenSectorenWaarschuwingsadressenListRequest struct {
	ctx context.Context
	ApiService *WaarschuwingsadressenApiService
	id string
	limit *int32
	offset *int32
}

// Number of results to return per page.
func (r ApiAansluitingenSectorenWaarschuwingsadressenListRequest) Limit(limit int32) ApiAansluitingenSectorenWaarschuwingsadressenListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiAansluitingenSectorenWaarschuwingsadressenListRequest) Offset(offset int32) ApiAansluitingenSectorenWaarschuwingsadressenListRequest {
	r.offset = &offset
	return r
}

func (r ApiAansluitingenSectorenWaarschuwingsadressenListRequest) Execute() (*PaginatedWaarschuwingsadresList, *http.Response, error) {
	return r.ApiService.AansluitingenSectorenWaarschuwingsadressenListExecute(r)
}

/*
AansluitingenSectorenWaarschuwingsadressenList Method for AansluitingenSectorenWaarschuwingsadressenList

Overzicht van waarschuwingsadressen van de opgegeven sector

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this Sector
 @return ApiAansluitingenSectorenWaarschuwingsadressenListRequest
*/
func (a *WaarschuwingsadressenApiService) AansluitingenSectorenWaarschuwingsadressenList(ctx context.Context, id string) ApiAansluitingenSectorenWaarschuwingsadressenListRequest {
	return ApiAansluitingenSectorenWaarschuwingsadressenListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedWaarschuwingsadresList
func (a *WaarschuwingsadressenApiService) AansluitingenSectorenWaarschuwingsadressenListExecute(r ApiAansluitingenSectorenWaarschuwingsadressenListRequest) (*PaginatedWaarschuwingsadresList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedWaarschuwingsadresList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WaarschuwingsadressenApiService.AansluitingenSectorenWaarschuwingsadressenList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/aansluitingen/sectoren/{id}/waarschuwingsadressen"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAansluitingenWaarschuwingsadressenDestroyRequest struct {
	ctx context.Context
	ApiService *WaarschuwingsadressenApiService
	id int32
}

func (r ApiAansluitingenWaarschuwingsadressenDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.AansluitingenWaarschuwingsadressenDestroyExecute(r)
}

/*
AansluitingenWaarschuwingsadressenDestroy Method for AansluitingenWaarschuwingsadressenDestroy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAansluitingenWaarschuwingsadressenDestroyRequest
*/
func (a *WaarschuwingsadressenApiService) AansluitingenWaarschuwingsadressenDestroy(ctx context.Context, id int32) ApiAansluitingenWaarschuwingsadressenDestroyRequest {
	return ApiAansluitingenWaarschuwingsadressenDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *WaarschuwingsadressenApiService) AansluitingenWaarschuwingsadressenDestroyExecute(r ApiAansluitingenWaarschuwingsadressenDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WaarschuwingsadressenApiService.AansluitingenWaarschuwingsadressenDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/aansluitingen/waarschuwingsadressen/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAansluitingenWaarschuwingsadressenPartialUpdateRequest struct {
	ctx context.Context
	ApiService *WaarschuwingsadressenApiService
	id int32
	patchedWaarschuwingsadresRequest *PatchedWaarschuwingsadresRequest
}

func (r ApiAansluitingenWaarschuwingsadressenPartialUpdateRequest) PatchedWaarschuwingsadresRequest(patchedWaarschuwingsadresRequest PatchedWaarschuwingsadresRequest) ApiAansluitingenWaarschuwingsadressenPartialUpdateRequest {
	r.patchedWaarschuwingsadresRequest = &patchedWaarschuwingsadresRequest
	return r
}

func (r ApiAansluitingenWaarschuwingsadressenPartialUpdateRequest) Execute() (*Waarschuwingsadres, *http.Response, error) {
	return r.ApiService.AansluitingenWaarschuwingsadressenPartialUpdateExecute(r)
}

/*
AansluitingenWaarschuwingsadressenPartialUpdate Method for AansluitingenWaarschuwingsadressenPartialUpdate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAansluitingenWaarschuwingsadressenPartialUpdateRequest
*/
func (a *WaarschuwingsadressenApiService) AansluitingenWaarschuwingsadressenPartialUpdate(ctx context.Context, id int32) ApiAansluitingenWaarschuwingsadressenPartialUpdateRequest {
	return ApiAansluitingenWaarschuwingsadressenPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Waarschuwingsadres
func (a *WaarschuwingsadressenApiService) AansluitingenWaarschuwingsadressenPartialUpdateExecute(r ApiAansluitingenWaarschuwingsadressenPartialUpdateRequest) (*Waarschuwingsadres, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Waarschuwingsadres
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WaarschuwingsadressenApiService.AansluitingenWaarschuwingsadressenPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/aansluitingen/waarschuwingsadressen/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWaarschuwingsadresRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAansluitingenWaarschuwingsadressenRetrieveRequest struct {
	ctx context.Context
	ApiService *WaarschuwingsadressenApiService
	id int32
}

func (r ApiAansluitingenWaarschuwingsadressenRetrieveRequest) Execute() (*Waarschuwingsadres, *http.Response, error) {
	return r.ApiService.AansluitingenWaarschuwingsadressenRetrieveExecute(r)
}

/*
AansluitingenWaarschuwingsadressenRetrieve Method for AansluitingenWaarschuwingsadressenRetrieve

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAansluitingenWaarschuwingsadressenRetrieveRequest
*/
func (a *WaarschuwingsadressenApiService) AansluitingenWaarschuwingsadressenRetrieve(ctx context.Context, id int32) ApiAansluitingenWaarschuwingsadressenRetrieveRequest {
	return ApiAansluitingenWaarschuwingsadressenRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Waarschuwingsadres
func (a *WaarschuwingsadressenApiService) AansluitingenWaarschuwingsadressenRetrieveExecute(r ApiAansluitingenWaarschuwingsadressenRetrieveRequest) (*Waarschuwingsadres, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Waarschuwingsadres
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WaarschuwingsadressenApiService.AansluitingenWaarschuwingsadressenRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/aansluitingen/waarschuwingsadressen/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAansluitingenWaarschuwingsadressenUpdateRequest struct {
	ctx context.Context
	ApiService *WaarschuwingsadressenApiService
	id int32
	waarschuwingsadresRequest *WaarschuwingsadresRequest
}

func (r ApiAansluitingenWaarschuwingsadressenUpdateRequest) WaarschuwingsadresRequest(waarschuwingsadresRequest WaarschuwingsadresRequest) ApiAansluitingenWaarschuwingsadressenUpdateRequest {
	r.waarschuwingsadresRequest = &waarschuwingsadresRequest
	return r
}

func (r ApiAansluitingenWaarschuwingsadressenUpdateRequest) Execute() (*Waarschuwingsadres, *http.Response, error) {
	return r.ApiService.AansluitingenWaarschuwingsadressenUpdateExecute(r)
}

/*
AansluitingenWaarschuwingsadressenUpdate Method for AansluitingenWaarschuwingsadressenUpdate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAansluitingenWaarschuwingsadressenUpdateRequest
*/
func (a *WaarschuwingsadressenApiService) AansluitingenWaarschuwingsadressenUpdate(ctx context.Context, id int32) ApiAansluitingenWaarschuwingsadressenUpdateRequest {
	return ApiAansluitingenWaarschuwingsadressenUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Waarschuwingsadres
func (a *WaarschuwingsadressenApiService) AansluitingenWaarschuwingsadressenUpdateExecute(r ApiAansluitingenWaarschuwingsadressenUpdateRequest) (*Waarschuwingsadres, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Waarschuwingsadres
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WaarschuwingsadressenApiService.AansluitingenWaarschuwingsadressenUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/aansluitingen/waarschuwingsadressen/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.waarschuwingsadresRequest == nil {
		return localVarReturnValue, nil, reportError("waarschuwingsadresRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.waarschuwingsadresRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
