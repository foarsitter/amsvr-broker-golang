/*
AMSVR Broker API

# Introductie     Voor u heeft u de online documentatie van de AMSVR Broker API. Omdat het een Nederlands domein      betreft worden er Engelse en Nederlandse terminologie door elkaar heen gebruikt.  Liefhebbers van de Swagger UI kunnen [hier terecht](/swagger-ui). Daarnaast is de API eveneens beschikbaar in de op endpoint niveau zoals bijvoorbeeld [hier](/api/aansluitingen).  ##        

API version: release-0.6.14
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package broker

import (
	"encoding/json"
	"fmt"
)

// MutatieZaakTypeEnum the model 'MutatieZaakTypeEnum'
type MutatieZaakTypeEnum string

// List of MutatieZaakTypeEnum
const (
	MUTATIEZAAKTYPEENUM_ADMINISTRATIEF MutatieZaakTypeEnum = "administratief"
	MUTATIEZAAKTYPEENUM_TECHNISCH MutatieZaakTypeEnum = "technisch"
)

// All allowed values of MutatieZaakTypeEnum enum
var AllowedMutatieZaakTypeEnumEnumValues = []MutatieZaakTypeEnum{
	"administratief",
	"technisch",
}

func (v *MutatieZaakTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MutatieZaakTypeEnum(value)
	for _, existing := range AllowedMutatieZaakTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MutatieZaakTypeEnum", value)
}

// NewMutatieZaakTypeEnumFromValue returns a pointer to a valid MutatieZaakTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMutatieZaakTypeEnumFromValue(v string) (*MutatieZaakTypeEnum, error) {
	ev := MutatieZaakTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MutatieZaakTypeEnum: valid values are %v", v, AllowedMutatieZaakTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MutatieZaakTypeEnum) IsValid() bool {
	for _, existing := range AllowedMutatieZaakTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MutatieZaakTypeEnum value
func (v MutatieZaakTypeEnum) Ptr() *MutatieZaakTypeEnum {
	return &v
}

type NullableMutatieZaakTypeEnum struct {
	value *MutatieZaakTypeEnum
	isSet bool
}

func (v NullableMutatieZaakTypeEnum) Get() *MutatieZaakTypeEnum {
	return v.value
}

func (v *NullableMutatieZaakTypeEnum) Set(val *MutatieZaakTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableMutatieZaakTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableMutatieZaakTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMutatieZaakTypeEnum(val *MutatieZaakTypeEnum) *NullableMutatieZaakTypeEnum {
	return &NullableMutatieZaakTypeEnum{value: val, isSet: true}
}

func (v NullableMutatieZaakTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMutatieZaakTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

