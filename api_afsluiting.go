/*
AMSVR Broker API

# Introductie     Voor u heeft u de online documentatie van de AMSVR Broker API. Omdat het een Nederlands domein      betreft worden er Engelse en Nederlandse terminologie door elkaar heen gebruikt.  Liefhebbers van de Swagger UI kunnen [hier terecht](/swagger-ui). Daarnaast is de API eveneens beschikbaar in de op endpoint niveau zoals bijvoorbeeld [hier](/api/aansluitingen).  ##        

API version: release-0.6.14
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package broker

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// AfsluitingApiService AfsluitingApi service
type AfsluitingApiService service

type ApiZakenAfsluitingAfwijzenCreateRequest struct {
	ctx context.Context
	ApiService *AfsluitingApiService
	id int32
	afsluitingZaakAfwijzenRequest *AfsluitingZaakAfwijzenRequest
}

func (r ApiZakenAfsluitingAfwijzenCreateRequest) AfsluitingZaakAfwijzenRequest(afsluitingZaakAfwijzenRequest AfsluitingZaakAfwijzenRequest) ApiZakenAfsluitingAfwijzenCreateRequest {
	r.afsluitingZaakAfwijzenRequest = &afsluitingZaakAfwijzenRequest
	return r
}

func (r ApiZakenAfsluitingAfwijzenCreateRequest) Execute() (*AfsluitingZaak, *http.Response, error) {
	return r.ApiService.ZakenAfsluitingAfwijzenCreateExecute(r)
}

/*
ZakenAfsluitingAfwijzenCreate Method for ZakenAfsluitingAfwijzenCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiZakenAfsluitingAfwijzenCreateRequest
*/
func (a *AfsluitingApiService) ZakenAfsluitingAfwijzenCreate(ctx context.Context, id int32) ApiZakenAfsluitingAfwijzenCreateRequest {
	return ApiZakenAfsluitingAfwijzenCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AfsluitingZaak
func (a *AfsluitingApiService) ZakenAfsluitingAfwijzenCreateExecute(r ApiZakenAfsluitingAfwijzenCreateRequest) (*AfsluitingZaak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AfsluitingZaak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AfsluitingApiService.ZakenAfsluitingAfwijzenCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/afsluiting/{id}/afwijzen"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.afsluitingZaakAfwijzenRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiZakenAfsluitingAnnulerenCreateRequest struct {
	ctx context.Context
	ApiService *AfsluitingApiService
	id int32
	afsluitingZaakAnnulerenRequest *AfsluitingZaakAnnulerenRequest
}

func (r ApiZakenAfsluitingAnnulerenCreateRequest) AfsluitingZaakAnnulerenRequest(afsluitingZaakAnnulerenRequest AfsluitingZaakAnnulerenRequest) ApiZakenAfsluitingAnnulerenCreateRequest {
	r.afsluitingZaakAnnulerenRequest = &afsluitingZaakAnnulerenRequest
	return r
}

func (r ApiZakenAfsluitingAnnulerenCreateRequest) Execute() (*AfsluitingZaak, *http.Response, error) {
	return r.ApiService.ZakenAfsluitingAnnulerenCreateExecute(r)
}

/*
ZakenAfsluitingAnnulerenCreate Method for ZakenAfsluitingAnnulerenCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiZakenAfsluitingAnnulerenCreateRequest
*/
func (a *AfsluitingApiService) ZakenAfsluitingAnnulerenCreate(ctx context.Context, id int32) ApiZakenAfsluitingAnnulerenCreateRequest {
	return ApiZakenAfsluitingAnnulerenCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AfsluitingZaak
func (a *AfsluitingApiService) ZakenAfsluitingAnnulerenCreateExecute(r ApiZakenAfsluitingAnnulerenCreateRequest) (*AfsluitingZaak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AfsluitingZaak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AfsluitingApiService.ZakenAfsluitingAnnulerenCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/afsluiting/{id}/annuleren"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.afsluitingZaakAnnulerenRequest == nil {
		return localVarReturnValue, nil, reportError("afsluitingZaakAnnulerenRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.afsluitingZaakAnnulerenRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiZakenAfsluitingBevestigenCreateRequest struct {
	ctx context.Context
	ApiService *AfsluitingApiService
	id int32
	afsluitingZaakBevestigenRequest *AfsluitingZaakBevestigenRequest
}

func (r ApiZakenAfsluitingBevestigenCreateRequest) AfsluitingZaakBevestigenRequest(afsluitingZaakBevestigenRequest AfsluitingZaakBevestigenRequest) ApiZakenAfsluitingBevestigenCreateRequest {
	r.afsluitingZaakBevestigenRequest = &afsluitingZaakBevestigenRequest
	return r
}

func (r ApiZakenAfsluitingBevestigenCreateRequest) Execute() (*AfsluitingZaak, *http.Response, error) {
	return r.ApiService.ZakenAfsluitingBevestigenCreateExecute(r)
}

/*
ZakenAfsluitingBevestigenCreate Method for ZakenAfsluitingBevestigenCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiZakenAfsluitingBevestigenCreateRequest
*/
func (a *AfsluitingApiService) ZakenAfsluitingBevestigenCreate(ctx context.Context, id int32) ApiZakenAfsluitingBevestigenCreateRequest {
	return ApiZakenAfsluitingBevestigenCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AfsluitingZaak
func (a *AfsluitingApiService) ZakenAfsluitingBevestigenCreateExecute(r ApiZakenAfsluitingBevestigenCreateRequest) (*AfsluitingZaak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AfsluitingZaak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AfsluitingApiService.ZakenAfsluitingBevestigenCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/afsluiting/{id}/bevestigen"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.afsluitingZaakBevestigenRequest == nil {
		return localVarReturnValue, nil, reportError("afsluitingZaakBevestigenRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.afsluitingZaakBevestigenRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiZakenAfsluitingGoedkeurenCreateRequest struct {
	ctx context.Context
	ApiService *AfsluitingApiService
	id int32
	afsluitingZaakGoedkeurenRequest *AfsluitingZaakGoedkeurenRequest
}

func (r ApiZakenAfsluitingGoedkeurenCreateRequest) AfsluitingZaakGoedkeurenRequest(afsluitingZaakGoedkeurenRequest AfsluitingZaakGoedkeurenRequest) ApiZakenAfsluitingGoedkeurenCreateRequest {
	r.afsluitingZaakGoedkeurenRequest = &afsluitingZaakGoedkeurenRequest
	return r
}

func (r ApiZakenAfsluitingGoedkeurenCreateRequest) Execute() (*AfsluitingZaak, *http.Response, error) {
	return r.ApiService.ZakenAfsluitingGoedkeurenCreateExecute(r)
}

/*
ZakenAfsluitingGoedkeurenCreate Method for ZakenAfsluitingGoedkeurenCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiZakenAfsluitingGoedkeurenCreateRequest
*/
func (a *AfsluitingApiService) ZakenAfsluitingGoedkeurenCreate(ctx context.Context, id int32) ApiZakenAfsluitingGoedkeurenCreateRequest {
	return ApiZakenAfsluitingGoedkeurenCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AfsluitingZaak
func (a *AfsluitingApiService) ZakenAfsluitingGoedkeurenCreateExecute(r ApiZakenAfsluitingGoedkeurenCreateRequest) (*AfsluitingZaak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AfsluitingZaak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AfsluitingApiService.ZakenAfsluitingGoedkeurenCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/afsluiting/{id}/goedkeuren"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.afsluitingZaakGoedkeurenRequest == nil {
		return localVarReturnValue, nil, reportError("afsluitingZaakGoedkeurenRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.afsluitingZaakGoedkeurenRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiZakenAfsluitingIndienenCreateRequest struct {
	ctx context.Context
	ApiService *AfsluitingApiService
	afsluitingZaakRequest *AfsluitingZaakRequest
}

func (r ApiZakenAfsluitingIndienenCreateRequest) AfsluitingZaakRequest(afsluitingZaakRequest AfsluitingZaakRequest) ApiZakenAfsluitingIndienenCreateRequest {
	r.afsluitingZaakRequest = &afsluitingZaakRequest
	return r
}

func (r ApiZakenAfsluitingIndienenCreateRequest) Execute() (*AfsluitingZaak, *http.Response, error) {
	return r.ApiService.ZakenAfsluitingIndienenCreateExecute(r)
}

/*
ZakenAfsluitingIndienenCreate Method for ZakenAfsluitingIndienenCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiZakenAfsluitingIndienenCreateRequest
*/
func (a *AfsluitingApiService) ZakenAfsluitingIndienenCreate(ctx context.Context) ApiZakenAfsluitingIndienenCreateRequest {
	return ApiZakenAfsluitingIndienenCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AfsluitingZaak
func (a *AfsluitingApiService) ZakenAfsluitingIndienenCreateExecute(r ApiZakenAfsluitingIndienenCreateRequest) (*AfsluitingZaak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AfsluitingZaak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AfsluitingApiService.ZakenAfsluitingIndienenCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/afsluiting/indienen"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.afsluitingZaakRequest == nil {
		return localVarReturnValue, nil, reportError("afsluitingZaakRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.afsluitingZaakRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiZakenAfsluitingListRequest struct {
	ctx context.Context
	ApiService *AfsluitingApiService
	gesloten *bool
	limit *int32
	offset *int32
	status *[]string
}

func (r ApiZakenAfsluitingListRequest) Gesloten(gesloten bool) ApiZakenAfsluitingListRequest {
	r.gesloten = &gesloten
	return r
}

// Number of results to return per page.
func (r ApiZakenAfsluitingListRequest) Limit(limit int32) ApiZakenAfsluitingListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiZakenAfsluitingListRequest) Offset(offset int32) ApiZakenAfsluitingListRequest {
	r.offset = &offset
	return r
}

// nieuw &#x3D; Afsluiting, ingediend &#x3D; Ingediend [ATSP], afgewezen &#x3D; Afgewezen [Risicobeheer], goedgekeurd &#x3D; Goedgekeurd [Risicobeheer], bevestigd &#x3D; Bevestigd [ATSP], uitgevoerd &#x3D; Uitgevoerd [AMS-Servicedesk], verwijderd &#x3D; Verwijderd [GMS], geannuleerd &#x3D; Geannuleerd
func (r ApiZakenAfsluitingListRequest) Status(status []string) ApiZakenAfsluitingListRequest {
	r.status = &status
	return r
}

func (r ApiZakenAfsluitingListRequest) Execute() (*PaginatedAfsluitingZaakList, *http.Response, error) {
	return r.ApiService.ZakenAfsluitingListExecute(r)
}

/*
ZakenAfsluitingList Method for ZakenAfsluitingList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiZakenAfsluitingListRequest
*/
func (a *AfsluitingApiService) ZakenAfsluitingList(ctx context.Context) ApiZakenAfsluitingListRequest {
	return ApiZakenAfsluitingListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedAfsluitingZaakList
func (a *AfsluitingApiService) ZakenAfsluitingListExecute(r ApiZakenAfsluitingListRequest) (*PaginatedAfsluitingZaakList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedAfsluitingZaakList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AfsluitingApiService.ZakenAfsluitingList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/afsluiting/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.gesloten != nil {
		localVarQueryParams.Add("gesloten", parameterToString(*r.gesloten, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("status", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("status", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiZakenAfsluitingRetrieveRequest struct {
	ctx context.Context
	ApiService *AfsluitingApiService
	id int32
}

func (r ApiZakenAfsluitingRetrieveRequest) Execute() (*AfsluitingZaak, *http.Response, error) {
	return r.ApiService.ZakenAfsluitingRetrieveExecute(r)
}

/*
ZakenAfsluitingRetrieve Method for ZakenAfsluitingRetrieve

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiZakenAfsluitingRetrieveRequest
*/
func (a *AfsluitingApiService) ZakenAfsluitingRetrieve(ctx context.Context, id int32) ApiZakenAfsluitingRetrieveRequest {
	return ApiZakenAfsluitingRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AfsluitingZaak
func (a *AfsluitingApiService) ZakenAfsluitingRetrieveExecute(r ApiZakenAfsluitingRetrieveRequest) (*AfsluitingZaak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AfsluitingZaak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AfsluitingApiService.ZakenAfsluitingRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/afsluiting/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiZakenAfsluitingUitvoerenCreateRequest struct {
	ctx context.Context
	ApiService *AfsluitingApiService
	id int32
	afsluitingZaakUitvoerenRequest *AfsluitingZaakUitvoerenRequest
}

func (r ApiZakenAfsluitingUitvoerenCreateRequest) AfsluitingZaakUitvoerenRequest(afsluitingZaakUitvoerenRequest AfsluitingZaakUitvoerenRequest) ApiZakenAfsluitingUitvoerenCreateRequest {
	r.afsluitingZaakUitvoerenRequest = &afsluitingZaakUitvoerenRequest
	return r
}

func (r ApiZakenAfsluitingUitvoerenCreateRequest) Execute() (*AfsluitingZaak, *http.Response, error) {
	return r.ApiService.ZakenAfsluitingUitvoerenCreateExecute(r)
}

/*
ZakenAfsluitingUitvoerenCreate Method for ZakenAfsluitingUitvoerenCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiZakenAfsluitingUitvoerenCreateRequest
*/
func (a *AfsluitingApiService) ZakenAfsluitingUitvoerenCreate(ctx context.Context, id int32) ApiZakenAfsluitingUitvoerenCreateRequest {
	return ApiZakenAfsluitingUitvoerenCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AfsluitingZaak
func (a *AfsluitingApiService) ZakenAfsluitingUitvoerenCreateExecute(r ApiZakenAfsluitingUitvoerenCreateRequest) (*AfsluitingZaak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AfsluitingZaak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AfsluitingApiService.ZakenAfsluitingUitvoerenCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/afsluiting/{id}/uitvoeren"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.afsluitingZaakUitvoerenRequest == nil {
		return localVarReturnValue, nil, reportError("afsluitingZaakUitvoerenRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.afsluitingZaakUitvoerenRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
