/*
AMSVR Broker API

# Introductie     Voor u heeft u de online documentatie van de AMSVR Broker API. Omdat het een Nederlands domein      betreft worden er Engelse en Nederlandse terminologie door elkaar heen gebruikt.  Liefhebbers van de Swagger UI kunnen [hier terecht](/swagger-ui). Daarnaast is de API eveneens beschikbaar in de op endpoint niveau zoals bijvoorbeeld [hier](/api/aansluitingen).  ##        

API version: release-0.6.14
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package broker

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// KiezerVervangenApiService KiezerVervangenApi service
type KiezerVervangenApiService service

type ApiZakenKiezerVervangenAnnulerenCreateRequest struct {
	ctx context.Context
	ApiService *KiezerVervangenApiService
	id int32
	kiezerVervangenZaakRequest *KiezerVervangenZaakRequest
}

func (r ApiZakenKiezerVervangenAnnulerenCreateRequest) KiezerVervangenZaakRequest(kiezerVervangenZaakRequest KiezerVervangenZaakRequest) ApiZakenKiezerVervangenAnnulerenCreateRequest {
	r.kiezerVervangenZaakRequest = &kiezerVervangenZaakRequest
	return r
}

func (r ApiZakenKiezerVervangenAnnulerenCreateRequest) Execute() (*KiezerVervangenZaak, *http.Response, error) {
	return r.ApiService.ZakenKiezerVervangenAnnulerenCreateExecute(r)
}

/*
ZakenKiezerVervangenAnnulerenCreate Method for ZakenKiezerVervangenAnnulerenCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiZakenKiezerVervangenAnnulerenCreateRequest
*/
func (a *KiezerVervangenApiService) ZakenKiezerVervangenAnnulerenCreate(ctx context.Context, id int32) ApiZakenKiezerVervangenAnnulerenCreateRequest {
	return ApiZakenKiezerVervangenAnnulerenCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KiezerVervangenZaak
func (a *KiezerVervangenApiService) ZakenKiezerVervangenAnnulerenCreateExecute(r ApiZakenKiezerVervangenAnnulerenCreateRequest) (*KiezerVervangenZaak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KiezerVervangenZaak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KiezerVervangenApiService.ZakenKiezerVervangenAnnulerenCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/kiezer-vervangen/{id}/annuleren"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kiezerVervangenZaakRequest == nil {
		return localVarReturnValue, nil, reportError("kiezerVervangenZaakRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.kiezerVervangenZaakRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiZakenKiezerVervangenGoedkeurenCreateRequest struct {
	ctx context.Context
	ApiService *KiezerVervangenApiService
	id int32
	kiezerVervangenZaakRequest *KiezerVervangenZaakRequest
}

func (r ApiZakenKiezerVervangenGoedkeurenCreateRequest) KiezerVervangenZaakRequest(kiezerVervangenZaakRequest KiezerVervangenZaakRequest) ApiZakenKiezerVervangenGoedkeurenCreateRequest {
	r.kiezerVervangenZaakRequest = &kiezerVervangenZaakRequest
	return r
}

func (r ApiZakenKiezerVervangenGoedkeurenCreateRequest) Execute() (*KiezerVervangenZaak, *http.Response, error) {
	return r.ApiService.ZakenKiezerVervangenGoedkeurenCreateExecute(r)
}

/*
ZakenKiezerVervangenGoedkeurenCreate Method for ZakenKiezerVervangenGoedkeurenCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiZakenKiezerVervangenGoedkeurenCreateRequest
*/
func (a *KiezerVervangenApiService) ZakenKiezerVervangenGoedkeurenCreate(ctx context.Context, id int32) ApiZakenKiezerVervangenGoedkeurenCreateRequest {
	return ApiZakenKiezerVervangenGoedkeurenCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KiezerVervangenZaak
func (a *KiezerVervangenApiService) ZakenKiezerVervangenGoedkeurenCreateExecute(r ApiZakenKiezerVervangenGoedkeurenCreateRequest) (*KiezerVervangenZaak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KiezerVervangenZaak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KiezerVervangenApiService.ZakenKiezerVervangenGoedkeurenCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/kiezer-vervangen/{id}/goedkeuren"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kiezerVervangenZaakRequest == nil {
		return localVarReturnValue, nil, reportError("kiezerVervangenZaakRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.kiezerVervangenZaakRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiZakenKiezerVervangenIndienenCreateRequest struct {
	ctx context.Context
	ApiService *KiezerVervangenApiService
	aansluitnummer string
	kiezerVervangenZaakIndienenRequest *KiezerVervangenZaakIndienenRequest
}

func (r ApiZakenKiezerVervangenIndienenCreateRequest) KiezerVervangenZaakIndienenRequest(kiezerVervangenZaakIndienenRequest KiezerVervangenZaakIndienenRequest) ApiZakenKiezerVervangenIndienenCreateRequest {
	r.kiezerVervangenZaakIndienenRequest = &kiezerVervangenZaakIndienenRequest
	return r
}

func (r ApiZakenKiezerVervangenIndienenCreateRequest) Execute() (*KiezerVervangenZaakIndienen, *http.Response, error) {
	return r.ApiService.ZakenKiezerVervangenIndienenCreateExecute(r)
}

/*
ZakenKiezerVervangenIndienenCreate Method for ZakenKiezerVervangenIndienenCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param aansluitnummer
 @return ApiZakenKiezerVervangenIndienenCreateRequest
*/
func (a *KiezerVervangenApiService) ZakenKiezerVervangenIndienenCreate(ctx context.Context, aansluitnummer string) ApiZakenKiezerVervangenIndienenCreateRequest {
	return ApiZakenKiezerVervangenIndienenCreateRequest{
		ApiService: a,
		ctx: ctx,
		aansluitnummer: aansluitnummer,
	}
}

// Execute executes the request
//  @return KiezerVervangenZaakIndienen
func (a *KiezerVervangenApiService) ZakenKiezerVervangenIndienenCreateExecute(r ApiZakenKiezerVervangenIndienenCreateRequest) (*KiezerVervangenZaakIndienen, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KiezerVervangenZaakIndienen
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KiezerVervangenApiService.ZakenKiezerVervangenIndienenCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/kiezer-vervangen/{aansluitnummer}/indienen"
	localVarPath = strings.Replace(localVarPath, "{"+"aansluitnummer"+"}", url.PathEscape(parameterToString(r.aansluitnummer, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.kiezerVervangenZaakIndienenRequest == nil {
		return localVarReturnValue, nil, reportError("kiezerVervangenZaakIndienenRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.kiezerVervangenZaakIndienenRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiZakenKiezerVervangenInplannenCreateRequest struct {
	ctx context.Context
	ApiService *KiezerVervangenApiService
	id int32
	kiezerVervangenZaakInplannenRequest *KiezerVervangenZaakInplannenRequest
}

func (r ApiZakenKiezerVervangenInplannenCreateRequest) KiezerVervangenZaakInplannenRequest(kiezerVervangenZaakInplannenRequest KiezerVervangenZaakInplannenRequest) ApiZakenKiezerVervangenInplannenCreateRequest {
	r.kiezerVervangenZaakInplannenRequest = &kiezerVervangenZaakInplannenRequest
	return r
}

func (r ApiZakenKiezerVervangenInplannenCreateRequest) Execute() (*KiezerVervangenZaakInplannen, *http.Response, error) {
	return r.ApiService.ZakenKiezerVervangenInplannenCreateExecute(r)
}

/*
ZakenKiezerVervangenInplannenCreate Method for ZakenKiezerVervangenInplannenCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiZakenKiezerVervangenInplannenCreateRequest
*/
func (a *KiezerVervangenApiService) ZakenKiezerVervangenInplannenCreate(ctx context.Context, id int32) ApiZakenKiezerVervangenInplannenCreateRequest {
	return ApiZakenKiezerVervangenInplannenCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KiezerVervangenZaakInplannen
func (a *KiezerVervangenApiService) ZakenKiezerVervangenInplannenCreateExecute(r ApiZakenKiezerVervangenInplannenCreateRequest) (*KiezerVervangenZaakInplannen, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KiezerVervangenZaakInplannen
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KiezerVervangenApiService.ZakenKiezerVervangenInplannenCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/kiezer-vervangen/{id}/inplannen"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.kiezerVervangenZaakInplannenRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiZakenKiezerVervangenListRequest struct {
	ctx context.Context
	ApiService *KiezerVervangenApiService
	gesloten *bool
	limit *int32
	offset *int32
	status *[]string
}

func (r ApiZakenKiezerVervangenListRequest) Gesloten(gesloten bool) ApiZakenKiezerVervangenListRequest {
	r.gesloten = &gesloten
	return r
}

// Number of results to return per page.
func (r ApiZakenKiezerVervangenListRequest) Limit(limit int32) ApiZakenKiezerVervangenListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiZakenKiezerVervangenListRequest) Offset(offset int32) ApiZakenKiezerVervangenListRequest {
	r.offset = &offset
	return r
}

// nieuw &#x3D; Nieuw, ingediend &#x3D; Ingediend [ATSP], goedgekeurd &#x3D; Goedgekeurd [AMS-Servicedesk], ingepland &#x3D; Live test ingepland [ATSP], doorgevoerd &#x3D; Doorgevoerd [GMS], geannuleerd &#x3D; Geannuleerd
func (r ApiZakenKiezerVervangenListRequest) Status(status []string) ApiZakenKiezerVervangenListRequest {
	r.status = &status
	return r
}

func (r ApiZakenKiezerVervangenListRequest) Execute() (*PaginatedKiezerVervangenZaakList, *http.Response, error) {
	return r.ApiService.ZakenKiezerVervangenListExecute(r)
}

/*
ZakenKiezerVervangenList Method for ZakenKiezerVervangenList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiZakenKiezerVervangenListRequest
*/
func (a *KiezerVervangenApiService) ZakenKiezerVervangenList(ctx context.Context) ApiZakenKiezerVervangenListRequest {
	return ApiZakenKiezerVervangenListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedKiezerVervangenZaakList
func (a *KiezerVervangenApiService) ZakenKiezerVervangenListExecute(r ApiZakenKiezerVervangenListRequest) (*PaginatedKiezerVervangenZaakList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedKiezerVervangenZaakList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KiezerVervangenApiService.ZakenKiezerVervangenList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/kiezer-vervangen/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.gesloten != nil {
		localVarQueryParams.Add("gesloten", parameterToString(*r.gesloten, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("status", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("status", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiZakenKiezerVervangenRetrieveRequest struct {
	ctx context.Context
	ApiService *KiezerVervangenApiService
	id int32
}

func (r ApiZakenKiezerVervangenRetrieveRequest) Execute() (*KiezerVervangenZaak, *http.Response, error) {
	return r.ApiService.ZakenKiezerVervangenRetrieveExecute(r)
}

/*
ZakenKiezerVervangenRetrieve Method for ZakenKiezerVervangenRetrieve

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiZakenKiezerVervangenRetrieveRequest
*/
func (a *KiezerVervangenApiService) ZakenKiezerVervangenRetrieve(ctx context.Context, id int32) ApiZakenKiezerVervangenRetrieveRequest {
	return ApiZakenKiezerVervangenRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KiezerVervangenZaak
func (a *KiezerVervangenApiService) ZakenKiezerVervangenRetrieveExecute(r ApiZakenKiezerVervangenRetrieveRequest) (*KiezerVervangenZaak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KiezerVervangenZaak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KiezerVervangenApiService.ZakenKiezerVervangenRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/kiezer-vervangen/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
