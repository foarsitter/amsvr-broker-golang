/*
AMSVR Broker API

# Introductie     Voor u heeft u de online documentatie van de AMSVR Broker API. Omdat het een Nederlands domein      betreft worden er Engelse en Nederlandse terminologie door elkaar heen gebruikt.  Liefhebbers van de Swagger UI kunnen [hier terecht](/swagger-ui). Daarnaast is de API eveneens beschikbaar in de op endpoint niveau zoals bijvoorbeeld [hier](/api/aansluitingen).  ##        

API version: release-0.6.14
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package broker

import (
	"encoding/json"
	"fmt"
)

// GebruiksfunctieEnum the model 'GebruiksfunctieEnum'
type GebruiksfunctieEnum string

// List of GebruiksfunctieEnum
const (
	GEBRUIKSFUNCTIEENUM_GEZONDHEIDSZORGFUNCTIE_MET_BEDGEBIED GebruiksfunctieEnum = "Gezondheidszorgfunctie met bedgebied"
	GEBRUIKSFUNCTIEENUM_GROEPSZORGWONING_VOOR_24_UURS_ZORG GebruiksfunctieEnum = "Groepszorgwoning voor 24-uurs zorg"
	GEBRUIKSFUNCTIEENUM_LOGIESGEBOUW_ZONDER_24_UURSBEWAKING_MET_VLOERHOOGTE__15_M1 GebruiksfunctieEnum = "Logiesgebouw zonder 24-uursbewaking met vloerhoogte > 1,5 m1"
	GEBRUIKSFUNCTIEENUM_ZORGCLUSTERWONING_VOOR_24_UURS_ZORG_IN_EEN_WOONGEBOUW GebruiksfunctieEnum = "Zorgclusterwoning voor 24-uurs zorg in een woongebouw"
	GEBRUIKSFUNCTIEENUM_KINDEROPVANG_VOOR_KINDEREN__4_JAAR_MET_VLOERHOOGTE__15_M1__6_BEDJES GebruiksfunctieEnum = "Kinderopvang voor kinderen < 4 jaar met vloerhoogte > 1,5 m1 (6 bedjes)"
	GEBRUIKSFUNCTIEENUM_CELFUNCTIE GebruiksfunctieEnum = "Celfunctie"
	GEBRUIKSFUNCTIEENUM_GELIJKWAARDIGE_VEILIGHEID__BHVB_DOORMELDEN_VIA_PAC_MOGELIJK GebruiksfunctieEnum = "Gelijkwaardige veiligheid (BHVB) doormelden via PAC mogelijk"
	GEBRUIKSFUNCTIEENUM_GELIJKWAARDIGE_VEILIGHEID__SPRINKLER_DOORMELDEN_VIA_PAC_MOGELIJK GebruiksfunctieEnum = "Gelijkwaardige veiligheid (sprinkler) doormelden via PAC mogelijk"
	GEBRUIKSFUNCTIEENUM_ANDERE_WETGEVING__BV__MILIEU__OF_ARCHIEFWETGEVING GebruiksfunctieEnum = "Andere wetgeving (bv. Milieu- of archiefwetgeving)"
	GEBRUIKSFUNCTIEENUM_O_B_V__LOKALE_BESTUURLIJKE_AFSPRAKEN_WENSEN GebruiksfunctieEnum = "O.b.v. lokale bestuurlijke afspraken/wensen"
	GEBRUIKSFUNCTIEENUM_O_B_V__LOKALE_LEIDING_BRANDWEERZORG GebruiksfunctieEnum = "O.b.v. lokale leiding brandweerzorg"
)

// All allowed values of GebruiksfunctieEnum enum
var AllowedGebruiksfunctieEnumEnumValues = []GebruiksfunctieEnum{
	"Gezondheidszorgfunctie met bedgebied",
	"Groepszorgwoning voor 24-uurs zorg",
	"Logiesgebouw zonder 24-uursbewaking met vloerhoogte > 1,5 m1",
	"Zorgclusterwoning voor 24-uurs zorg in een woongebouw",
	"Kinderopvang voor kinderen < 4 jaar met vloerhoogte > 1,5 m1 (6 bedjes)",
	"Celfunctie",
	"Gelijkwaardige veiligheid (BHVB) doormelden via PAC mogelijk",
	"Gelijkwaardige veiligheid (sprinkler) doormelden via PAC mogelijk",
	"Andere wetgeving (bv. Milieu- of archiefwetgeving)",
	"O.b.v. lokale bestuurlijke afspraken/wensen",
	"O.b.v. lokale leiding brandweerzorg",
}

func (v *GebruiksfunctieEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GebruiksfunctieEnum(value)
	for _, existing := range AllowedGebruiksfunctieEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GebruiksfunctieEnum", value)
}

// NewGebruiksfunctieEnumFromValue returns a pointer to a valid GebruiksfunctieEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGebruiksfunctieEnumFromValue(v string) (*GebruiksfunctieEnum, error) {
	ev := GebruiksfunctieEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GebruiksfunctieEnum: valid values are %v", v, AllowedGebruiksfunctieEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GebruiksfunctieEnum) IsValid() bool {
	for _, existing := range AllowedGebruiksfunctieEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GebruiksfunctieEnum value
func (v GebruiksfunctieEnum) Ptr() *GebruiksfunctieEnum {
	return &v
}

type NullableGebruiksfunctieEnum struct {
	value *GebruiksfunctieEnum
	isSet bool
}

func (v NullableGebruiksfunctieEnum) Get() *GebruiksfunctieEnum {
	return v.value
}

func (v *NullableGebruiksfunctieEnum) Set(val *GebruiksfunctieEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableGebruiksfunctieEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableGebruiksfunctieEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGebruiksfunctieEnum(val *GebruiksfunctieEnum) *NullableGebruiksfunctieEnum {
	return &NullableGebruiksfunctieEnum{value: val, isSet: true}
}

func (v NullableGebruiksfunctieEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGebruiksfunctieEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

