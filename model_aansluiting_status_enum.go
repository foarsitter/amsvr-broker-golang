/*
AMSVR Broker API

# Introductie     Voor u heeft u de online documentatie van de AMSVR Broker API. Omdat het een Nederlands domein      betreft worden er Engelse en Nederlandse terminologie door elkaar heen gebruikt.  Liefhebbers van de Swagger UI kunnen [hier terecht](/swagger-ui). Daarnaast is de API eveneens beschikbaar in de op endpoint niveau zoals bijvoorbeeld [hier](/api/aansluitingen).  ##        

API version: release-0.6.14
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package broker

import (
	"encoding/json"
	"fmt"
)

// AansluitingStatusEnum the model 'AansluitingStatusEnum'
type AansluitingStatusEnum int32

// List of AansluitingStatusEnum
const (
	AANSLUITINGSTATUSENUM__0 AansluitingStatusEnum = 0
	AANSLUITINGSTATUSENUM__10 AansluitingStatusEnum = 10
	AANSLUITINGSTATUSENUM__20 AansluitingStatusEnum = 20
	AANSLUITINGSTATUSENUM__30 AansluitingStatusEnum = 30
	AANSLUITINGSTATUSENUM__50 AansluitingStatusEnum = 50
	AANSLUITINGSTATUSENUM__55 AansluitingStatusEnum = 55
	AANSLUITINGSTATUSENUM__60 AansluitingStatusEnum = 60
	AANSLUITINGSTATUSENUM__5 AansluitingStatusEnum = 5
	AANSLUITINGSTATUSENUM__61 AansluitingStatusEnum = 61
)

// All allowed values of AansluitingStatusEnum enum
var AllowedAansluitingStatusEnumEnumValues = []AansluitingStatusEnum{
	0,
	10,
	20,
	30,
	50,
	55,
	60,
	5,
	61,
}

func (v *AansluitingStatusEnum) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AansluitingStatusEnum(value)
	for _, existing := range AllowedAansluitingStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AansluitingStatusEnum", value)
}

// NewAansluitingStatusEnumFromValue returns a pointer to a valid AansluitingStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAansluitingStatusEnumFromValue(v int32) (*AansluitingStatusEnum, error) {
	ev := AansluitingStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AansluitingStatusEnum: valid values are %v", v, AllowedAansluitingStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AansluitingStatusEnum) IsValid() bool {
	for _, existing := range AllowedAansluitingStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AansluitingStatusEnum value
func (v AansluitingStatusEnum) Ptr() *AansluitingStatusEnum {
	return &v
}

type NullableAansluitingStatusEnum struct {
	value *AansluitingStatusEnum
	isSet bool
}

func (v NullableAansluitingStatusEnum) Get() *AansluitingStatusEnum {
	return v.value
}

func (v *NullableAansluitingStatusEnum) Set(val *AansluitingStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAansluitingStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAansluitingStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAansluitingStatusEnum(val *AansluitingStatusEnum) *NullableAansluitingStatusEnum {
	return &NullableAansluitingStatusEnum{value: val, isSet: true}
}

func (v NullableAansluitingStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAansluitingStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

