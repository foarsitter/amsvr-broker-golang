/*
AMSVR Broker API

# Introductie     Voor u heeft u de online documentatie van de AMSVR Broker API. Omdat het een Nederlands domein      betreft worden er Engelse en Nederlandse terminologie door elkaar heen gebruikt.  Liefhebbers van de Swagger UI kunnen [hier terecht](/swagger-ui). Daarnaast is de API eveneens beschikbaar in de op endpoint niveau zoals bijvoorbeeld [hier](/api/aansluitingen).  ##        

API version: release-0.6.14
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package broker

import (
	"encoding/json"
)

// ValidationObject struct for ValidationObject
type ValidationObject struct {
	ObjectType NullableObjectTypeEnum `json:"object_type"`
	ObjectId int32 `json:"object_id"`
	Results []ValidationRule `json:"results"`
}

// NewValidationObject instantiates a new ValidationObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidationObject(objectType NullableObjectTypeEnum, objectId int32, results []ValidationRule) *ValidationObject {
	this := ValidationObject{}
	this.ObjectType = objectType
	this.ObjectId = objectId
	this.Results = results
	return &this
}

// NewValidationObjectWithDefaults instantiates a new ValidationObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidationObjectWithDefaults() *ValidationObject {
	this := ValidationObject{}
	return &this
}

// GetObjectType returns the ObjectType field value
// If the value is explicit nil, the zero value for ObjectTypeEnum will be returned
func (o *ValidationObject) GetObjectType() ObjectTypeEnum {
	if o == nil || o.ObjectType.Get() == nil {
		var ret ObjectTypeEnum
		return ret
	}

	return *o.ObjectType.Get()
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ValidationObject) GetObjectTypeOk() (*ObjectTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectType.Get(), o.ObjectType.IsSet()
}

// SetObjectType sets field value
func (o *ValidationObject) SetObjectType(v ObjectTypeEnum) {
	o.ObjectType.Set(&v)
}

// GetObjectId returns the ObjectId field value
func (o *ValidationObject) GetObjectId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value
// and a boolean to check if the value has been set.
func (o *ValidationObject) GetObjectIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectId, true
}

// SetObjectId sets field value
func (o *ValidationObject) SetObjectId(v int32) {
	o.ObjectId = v
}

// GetResults returns the Results field value
func (o *ValidationObject) GetResults() []ValidationRule {
	if o == nil {
		var ret []ValidationRule
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *ValidationObject) GetResultsOk() ([]ValidationRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *ValidationObject) SetResults(v []ValidationRule) {
	o.Results = v
}

func (o ValidationObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["object_type"] = o.ObjectType.Get()
	}
	if true {
		toSerialize["object_id"] = o.ObjectId
	}
	if true {
		toSerialize["results"] = o.Results
	}
	return json.Marshal(toSerialize)
}

type NullableValidationObject struct {
	value *ValidationObject
	isSet bool
}

func (v NullableValidationObject) Get() *ValidationObject {
	return v.value
}

func (v *NullableValidationObject) Set(val *ValidationObject) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationObject) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationObject(val *ValidationObject) *NullableValidationObject {
	return &NullableValidationObject{value: val, isSet: true}
}

func (v NullableValidationObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


