/*
AMSVR Broker API

# Introductie     Voor u heeft u de online documentatie van de AMSVR Broker API. Omdat het een Nederlands domein      betreft worden er Engelse en Nederlandse terminologie door elkaar heen gebruikt.  Liefhebbers van de Swagger UI kunnen [hier terecht](/swagger-ui). Daarnaast is de API eveneens beschikbaar in de op endpoint niveau zoals bijvoorbeeld [hier](/api/aansluitingen).  ##        

API version: release-0.6.14
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package broker

import (
	"encoding/json"
	"fmt"
)

// ObjectTypeEnum the model 'ObjectTypeEnum'
type ObjectTypeEnum string

// List of ObjectTypeEnum
const (
	OBJECTTYPEENUM_AANSLUITING ObjectTypeEnum = "aansluiting"
	OBJECTTYPEENUM_SECTOR ObjectTypeEnum = "sector"
)

// All allowed values of ObjectTypeEnum enum
var AllowedObjectTypeEnumEnumValues = []ObjectTypeEnum{
	"aansluiting",
	"sector",
}

func (v *ObjectTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ObjectTypeEnum(value)
	for _, existing := range AllowedObjectTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ObjectTypeEnum", value)
}

// NewObjectTypeEnumFromValue returns a pointer to a valid ObjectTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewObjectTypeEnumFromValue(v string) (*ObjectTypeEnum, error) {
	ev := ObjectTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ObjectTypeEnum: valid values are %v", v, AllowedObjectTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ObjectTypeEnum) IsValid() bool {
	for _, existing := range AllowedObjectTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ObjectTypeEnum value
func (v ObjectTypeEnum) Ptr() *ObjectTypeEnum {
	return &v
}

type NullableObjectTypeEnum struct {
	value *ObjectTypeEnum
	isSet bool
}

func (v NullableObjectTypeEnum) Get() *ObjectTypeEnum {
	return v.value
}

func (v *NullableObjectTypeEnum) Set(val *ObjectTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectTypeEnum(val *ObjectTypeEnum) *NullableObjectTypeEnum {
	return &NullableObjectTypeEnum{value: val, isSet: true}
}

func (v NullableObjectTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

