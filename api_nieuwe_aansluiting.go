/*
AMSVR Broker API

# Introductie     Voor u heeft u de online documentatie van de AMSVR Broker API. Omdat het een Nederlands domein      betreft worden er Engelse en Nederlandse terminologie door elkaar heen gebruikt.  Liefhebbers van de Swagger UI kunnen [hier terecht](/swagger-ui). Daarnaast is de API eveneens beschikbaar in de op endpoint niveau zoals bijvoorbeeld [hier](/api/aansluitingen).  ##        

API version: release-0.6.14
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package broker

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// NieuweAansluitingApiService NieuweAansluitingApi service
type NieuweAansluitingApiService service

type ApiZakenNieuweAansluitingAfkeurenCreateRequest struct {
	ctx context.Context
	ApiService *NieuweAansluitingApiService
	id int32
	afsluitingZaakTransitieRequest *AfsluitingZaakTransitieRequest
}

func (r ApiZakenNieuweAansluitingAfkeurenCreateRequest) AfsluitingZaakTransitieRequest(afsluitingZaakTransitieRequest AfsluitingZaakTransitieRequest) ApiZakenNieuweAansluitingAfkeurenCreateRequest {
	r.afsluitingZaakTransitieRequest = &afsluitingZaakTransitieRequest
	return r
}

func (r ApiZakenNieuweAansluitingAfkeurenCreateRequest) Execute() (*NieuweAansluitingZaak, *http.Response, error) {
	return r.ApiService.ZakenNieuweAansluitingAfkeurenCreateExecute(r)
}

/*
ZakenNieuweAansluitingAfkeurenCreate Method for ZakenNieuweAansluitingAfkeurenCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiZakenNieuweAansluitingAfkeurenCreateRequest
*/
func (a *NieuweAansluitingApiService) ZakenNieuweAansluitingAfkeurenCreate(ctx context.Context, id int32) ApiZakenNieuweAansluitingAfkeurenCreateRequest {
	return ApiZakenNieuweAansluitingAfkeurenCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return NieuweAansluitingZaak
func (a *NieuweAansluitingApiService) ZakenNieuweAansluitingAfkeurenCreateExecute(r ApiZakenNieuweAansluitingAfkeurenCreateRequest) (*NieuweAansluitingZaak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NieuweAansluitingZaak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NieuweAansluitingApiService.ZakenNieuweAansluitingAfkeurenCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/nieuwe-aansluiting/{id}/afkeuren"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.afsluitingZaakTransitieRequest == nil {
		return localVarReturnValue, nil, reportError("afsluitingZaakTransitieRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.afsluitingZaakTransitieRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiZakenNieuweAansluitingAnnulerenCreateRequest struct {
	ctx context.Context
	ApiService *NieuweAansluitingApiService
	id int32
	afsluitingZaakTransitieRequest *AfsluitingZaakTransitieRequest
}

func (r ApiZakenNieuweAansluitingAnnulerenCreateRequest) AfsluitingZaakTransitieRequest(afsluitingZaakTransitieRequest AfsluitingZaakTransitieRequest) ApiZakenNieuweAansluitingAnnulerenCreateRequest {
	r.afsluitingZaakTransitieRequest = &afsluitingZaakTransitieRequest
	return r
}

func (r ApiZakenNieuweAansluitingAnnulerenCreateRequest) Execute() (*NieuweAansluitingZaak, *http.Response, error) {
	return r.ApiService.ZakenNieuweAansluitingAnnulerenCreateExecute(r)
}

/*
ZakenNieuweAansluitingAnnulerenCreate Method for ZakenNieuweAansluitingAnnulerenCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiZakenNieuweAansluitingAnnulerenCreateRequest
*/
func (a *NieuweAansluitingApiService) ZakenNieuweAansluitingAnnulerenCreate(ctx context.Context, id int32) ApiZakenNieuweAansluitingAnnulerenCreateRequest {
	return ApiZakenNieuweAansluitingAnnulerenCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return NieuweAansluitingZaak
func (a *NieuweAansluitingApiService) ZakenNieuweAansluitingAnnulerenCreateExecute(r ApiZakenNieuweAansluitingAnnulerenCreateRequest) (*NieuweAansluitingZaak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NieuweAansluitingZaak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NieuweAansluitingApiService.ZakenNieuweAansluitingAnnulerenCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/nieuwe-aansluiting/{id}/annuleren"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.afsluitingZaakTransitieRequest == nil {
		return localVarReturnValue, nil, reportError("afsluitingZaakTransitieRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.afsluitingZaakTransitieRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiZakenNieuweAansluitingGoedkeurenCreateRequest struct {
	ctx context.Context
	ApiService *NieuweAansluitingApiService
	id int32
	nieuweAfsluitingZaakGoedkeurenRequest *NieuweAfsluitingZaakGoedkeurenRequest
}

func (r ApiZakenNieuweAansluitingGoedkeurenCreateRequest) NieuweAfsluitingZaakGoedkeurenRequest(nieuweAfsluitingZaakGoedkeurenRequest NieuweAfsluitingZaakGoedkeurenRequest) ApiZakenNieuweAansluitingGoedkeurenCreateRequest {
	r.nieuweAfsluitingZaakGoedkeurenRequest = &nieuweAfsluitingZaakGoedkeurenRequest
	return r
}

func (r ApiZakenNieuweAansluitingGoedkeurenCreateRequest) Execute() (*NieuweAansluitingZaak, *http.Response, error) {
	return r.ApiService.ZakenNieuweAansluitingGoedkeurenCreateExecute(r)
}

/*
ZakenNieuweAansluitingGoedkeurenCreate Method for ZakenNieuweAansluitingGoedkeurenCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiZakenNieuweAansluitingGoedkeurenCreateRequest
*/
func (a *NieuweAansluitingApiService) ZakenNieuweAansluitingGoedkeurenCreate(ctx context.Context, id int32) ApiZakenNieuweAansluitingGoedkeurenCreateRequest {
	return ApiZakenNieuweAansluitingGoedkeurenCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return NieuweAansluitingZaak
func (a *NieuweAansluitingApiService) ZakenNieuweAansluitingGoedkeurenCreateExecute(r ApiZakenNieuweAansluitingGoedkeurenCreateRequest) (*NieuweAansluitingZaak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NieuweAansluitingZaak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NieuweAansluitingApiService.ZakenNieuweAansluitingGoedkeurenCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/nieuwe-aansluiting/{id}/goedkeuren"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nieuweAfsluitingZaakGoedkeurenRequest == nil {
		return localVarReturnValue, nil, reportError("nieuweAfsluitingZaakGoedkeurenRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nieuweAfsluitingZaakGoedkeurenRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiZakenNieuweAansluitingIndienenCreateRequest struct {
	ctx context.Context
	ApiService *NieuweAansluitingApiService
	id int32
	afsluitingZaakTransitieRequest *AfsluitingZaakTransitieRequest
}

func (r ApiZakenNieuweAansluitingIndienenCreateRequest) AfsluitingZaakTransitieRequest(afsluitingZaakTransitieRequest AfsluitingZaakTransitieRequest) ApiZakenNieuweAansluitingIndienenCreateRequest {
	r.afsluitingZaakTransitieRequest = &afsluitingZaakTransitieRequest
	return r
}

func (r ApiZakenNieuweAansluitingIndienenCreateRequest) Execute() (*NieuweAansluitingZaak, *http.Response, error) {
	return r.ApiService.ZakenNieuweAansluitingIndienenCreateExecute(r)
}

/*
ZakenNieuweAansluitingIndienenCreate Method for ZakenNieuweAansluitingIndienenCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiZakenNieuweAansluitingIndienenCreateRequest
*/
func (a *NieuweAansluitingApiService) ZakenNieuweAansluitingIndienenCreate(ctx context.Context, id int32) ApiZakenNieuweAansluitingIndienenCreateRequest {
	return ApiZakenNieuweAansluitingIndienenCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return NieuweAansluitingZaak
func (a *NieuweAansluitingApiService) ZakenNieuweAansluitingIndienenCreateExecute(r ApiZakenNieuweAansluitingIndienenCreateRequest) (*NieuweAansluitingZaak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NieuweAansluitingZaak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NieuweAansluitingApiService.ZakenNieuweAansluitingIndienenCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/nieuwe-aansluiting/{id}/indienen"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.afsluitingZaakTransitieRequest == nil {
		return localVarReturnValue, nil, reportError("afsluitingZaakTransitieRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.afsluitingZaakTransitieRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiZakenNieuweAansluitingInplannenCreateRequest struct {
	ctx context.Context
	ApiService *NieuweAansluitingApiService
	id int32
	nieuweAansluitingZaakLiveTestRequest *NieuweAansluitingZaakLiveTestRequest
}

func (r ApiZakenNieuweAansluitingInplannenCreateRequest) NieuweAansluitingZaakLiveTestRequest(nieuweAansluitingZaakLiveTestRequest NieuweAansluitingZaakLiveTestRequest) ApiZakenNieuweAansluitingInplannenCreateRequest {
	r.nieuweAansluitingZaakLiveTestRequest = &nieuweAansluitingZaakLiveTestRequest
	return r
}

func (r ApiZakenNieuweAansluitingInplannenCreateRequest) Execute() (*NieuweAansluitingZaakLiveTest, *http.Response, error) {
	return r.ApiService.ZakenNieuweAansluitingInplannenCreateExecute(r)
}

/*
ZakenNieuweAansluitingInplannenCreate Method for ZakenNieuweAansluitingInplannenCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiZakenNieuweAansluitingInplannenCreateRequest
*/
func (a *NieuweAansluitingApiService) ZakenNieuweAansluitingInplannenCreate(ctx context.Context, id int32) ApiZakenNieuweAansluitingInplannenCreateRequest {
	return ApiZakenNieuweAansluitingInplannenCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return NieuweAansluitingZaakLiveTest
func (a *NieuweAansluitingApiService) ZakenNieuweAansluitingInplannenCreateExecute(r ApiZakenNieuweAansluitingInplannenCreateRequest) (*NieuweAansluitingZaakLiveTest, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NieuweAansluitingZaakLiveTest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NieuweAansluitingApiService.ZakenNieuweAansluitingInplannenCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/nieuwe-aansluiting/{id}/inplannen"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nieuweAansluitingZaakLiveTestRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiZakenNieuweAansluitingListRequest struct {
	ctx context.Context
	ApiService *NieuweAansluitingApiService
	gesloten *bool
	limit *int32
	offset *int32
	status *[]string
}

func (r ApiZakenNieuweAansluitingListRequest) Gesloten(gesloten bool) ApiZakenNieuweAansluitingListRequest {
	r.gesloten = &gesloten
	return r
}

// Number of results to return per page.
func (r ApiZakenNieuweAansluitingListRequest) Limit(limit int32) ApiZakenNieuweAansluitingListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiZakenNieuweAansluitingListRequest) Offset(offset int32) ApiZakenNieuweAansluitingListRequest {
	r.offset = &offset
	return r
}

// nieuw &#x3D; Nieuw, ingediend &#x3D; Ingediend ter aanvraag [ATSP], afgekeurd &#x3D; Aanvraag afgekeurd [Risicobeheer], realisatie &#x3D; Aanvraag goedgekeurd [Risicobeheer], gms_doorgevoerd &#x3D; Doorgevoerd [GMS], technisch_gereed &#x3D; Live test ingepland [ATSP], goedgekeurd &#x3D; Goedgekeurd [AMS-Servicedesk], opgeleverd &#x3D; Actief gezet [Risicobeheer], geannuleerd &#x3D; Geannuleerd
func (r ApiZakenNieuweAansluitingListRequest) Status(status []string) ApiZakenNieuweAansluitingListRequest {
	r.status = &status
	return r
}

func (r ApiZakenNieuweAansluitingListRequest) Execute() (*PaginatedNieuweAansluitingZaakList, *http.Response, error) {
	return r.ApiService.ZakenNieuweAansluitingListExecute(r)
}

/*
ZakenNieuweAansluitingList Method for ZakenNieuweAansluitingList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiZakenNieuweAansluitingListRequest
*/
func (a *NieuweAansluitingApiService) ZakenNieuweAansluitingList(ctx context.Context) ApiZakenNieuweAansluitingListRequest {
	return ApiZakenNieuweAansluitingListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedNieuweAansluitingZaakList
func (a *NieuweAansluitingApiService) ZakenNieuweAansluitingListExecute(r ApiZakenNieuweAansluitingListRequest) (*PaginatedNieuweAansluitingZaakList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNieuweAansluitingZaakList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NieuweAansluitingApiService.ZakenNieuweAansluitingList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/nieuwe-aansluiting/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.gesloten != nil {
		localVarQueryParams.Add("gesloten", parameterToString(*r.gesloten, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("status", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("status", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiZakenNieuweAansluitingOpleverenCreateRequest struct {
	ctx context.Context
	ApiService *NieuweAansluitingApiService
	id int32
	afsluitingZaakTransitieRequest *AfsluitingZaakTransitieRequest
}

func (r ApiZakenNieuweAansluitingOpleverenCreateRequest) AfsluitingZaakTransitieRequest(afsluitingZaakTransitieRequest AfsluitingZaakTransitieRequest) ApiZakenNieuweAansluitingOpleverenCreateRequest {
	r.afsluitingZaakTransitieRequest = &afsluitingZaakTransitieRequest
	return r
}

func (r ApiZakenNieuweAansluitingOpleverenCreateRequest) Execute() (*NieuweAansluitingZaak, *http.Response, error) {
	return r.ApiService.ZakenNieuweAansluitingOpleverenCreateExecute(r)
}

/*
ZakenNieuweAansluitingOpleverenCreate Method for ZakenNieuweAansluitingOpleverenCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiZakenNieuweAansluitingOpleverenCreateRequest
*/
func (a *NieuweAansluitingApiService) ZakenNieuweAansluitingOpleverenCreate(ctx context.Context, id int32) ApiZakenNieuweAansluitingOpleverenCreateRequest {
	return ApiZakenNieuweAansluitingOpleverenCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return NieuweAansluitingZaak
func (a *NieuweAansluitingApiService) ZakenNieuweAansluitingOpleverenCreateExecute(r ApiZakenNieuweAansluitingOpleverenCreateRequest) (*NieuweAansluitingZaak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NieuweAansluitingZaak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NieuweAansluitingApiService.ZakenNieuweAansluitingOpleverenCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/nieuwe-aansluiting/{id}/opleveren"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.afsluitingZaakTransitieRequest == nil {
		return localVarReturnValue, nil, reportError("afsluitingZaakTransitieRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.afsluitingZaakTransitieRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiZakenNieuweAansluitingRealisatieAfrondenCreateRequest struct {
	ctx context.Context
	ApiService *NieuweAansluitingApiService
	id int32
	nieuweAansluitingZaakLiveTestRequest *NieuweAansluitingZaakLiveTestRequest
}

func (r ApiZakenNieuweAansluitingRealisatieAfrondenCreateRequest) NieuweAansluitingZaakLiveTestRequest(nieuweAansluitingZaakLiveTestRequest NieuweAansluitingZaakLiveTestRequest) ApiZakenNieuweAansluitingRealisatieAfrondenCreateRequest {
	r.nieuweAansluitingZaakLiveTestRequest = &nieuweAansluitingZaakLiveTestRequest
	return r
}

func (r ApiZakenNieuweAansluitingRealisatieAfrondenCreateRequest) Execute() (*NieuweAansluitingZaakLiveTest, *http.Response, error) {
	return r.ApiService.ZakenNieuweAansluitingRealisatieAfrondenCreateExecute(r)
}

/*
ZakenNieuweAansluitingRealisatieAfrondenCreate Method for ZakenNieuweAansluitingRealisatieAfrondenCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiZakenNieuweAansluitingRealisatieAfrondenCreateRequest
*/
func (a *NieuweAansluitingApiService) ZakenNieuweAansluitingRealisatieAfrondenCreate(ctx context.Context, id int32) ApiZakenNieuweAansluitingRealisatieAfrondenCreateRequest {
	return ApiZakenNieuweAansluitingRealisatieAfrondenCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return NieuweAansluitingZaakLiveTest
func (a *NieuweAansluitingApiService) ZakenNieuweAansluitingRealisatieAfrondenCreateExecute(r ApiZakenNieuweAansluitingRealisatieAfrondenCreateRequest) (*NieuweAansluitingZaakLiveTest, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NieuweAansluitingZaakLiveTest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NieuweAansluitingApiService.ZakenNieuweAansluitingRealisatieAfrondenCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/nieuwe-aansluiting/{id}/realisatie_afronden"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nieuweAansluitingZaakLiveTestRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiZakenNieuweAansluitingRealisatieGoedkeurenCreateRequest struct {
	ctx context.Context
	ApiService *NieuweAansluitingApiService
	id int32
	afsluitingZaakTransitieRequest *AfsluitingZaakTransitieRequest
}

func (r ApiZakenNieuweAansluitingRealisatieGoedkeurenCreateRequest) AfsluitingZaakTransitieRequest(afsluitingZaakTransitieRequest AfsluitingZaakTransitieRequest) ApiZakenNieuweAansluitingRealisatieGoedkeurenCreateRequest {
	r.afsluitingZaakTransitieRequest = &afsluitingZaakTransitieRequest
	return r
}

func (r ApiZakenNieuweAansluitingRealisatieGoedkeurenCreateRequest) Execute() (*NieuweAansluitingZaak, *http.Response, error) {
	return r.ApiService.ZakenNieuweAansluitingRealisatieGoedkeurenCreateExecute(r)
}

/*
ZakenNieuweAansluitingRealisatieGoedkeurenCreate Method for ZakenNieuweAansluitingRealisatieGoedkeurenCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiZakenNieuweAansluitingRealisatieGoedkeurenCreateRequest
*/
func (a *NieuweAansluitingApiService) ZakenNieuweAansluitingRealisatieGoedkeurenCreate(ctx context.Context, id int32) ApiZakenNieuweAansluitingRealisatieGoedkeurenCreateRequest {
	return ApiZakenNieuweAansluitingRealisatieGoedkeurenCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return NieuweAansluitingZaak
func (a *NieuweAansluitingApiService) ZakenNieuweAansluitingRealisatieGoedkeurenCreateExecute(r ApiZakenNieuweAansluitingRealisatieGoedkeurenCreateRequest) (*NieuweAansluitingZaak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NieuweAansluitingZaak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NieuweAansluitingApiService.ZakenNieuweAansluitingRealisatieGoedkeurenCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/nieuwe-aansluiting/{id}/realisatie_goedkeuren"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.afsluitingZaakTransitieRequest == nil {
		return localVarReturnValue, nil, reportError("afsluitingZaakTransitieRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.afsluitingZaakTransitieRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiZakenNieuweAansluitingRetrieveRequest struct {
	ctx context.Context
	ApiService *NieuweAansluitingApiService
	id int32
}

func (r ApiZakenNieuweAansluitingRetrieveRequest) Execute() (*NieuweAansluitingZaak, *http.Response, error) {
	return r.ApiService.ZakenNieuweAansluitingRetrieveExecute(r)
}

/*
ZakenNieuweAansluitingRetrieve Method for ZakenNieuweAansluitingRetrieve

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiZakenNieuweAansluitingRetrieveRequest
*/
func (a *NieuweAansluitingApiService) ZakenNieuweAansluitingRetrieve(ctx context.Context, id int32) ApiZakenNieuweAansluitingRetrieveRequest {
	return ApiZakenNieuweAansluitingRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return NieuweAansluitingZaak
func (a *NieuweAansluitingApiService) ZakenNieuweAansluitingRetrieveExecute(r ApiZakenNieuweAansluitingRetrieveRequest) (*NieuweAansluitingZaak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NieuweAansluitingZaak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NieuweAansluitingApiService.ZakenNieuweAansluitingRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/zaken/nieuwe-aansluiting/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
