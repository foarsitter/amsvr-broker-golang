/*
AMSVR Broker API

# Introductie     Voor u heeft u de online documentatie van de AMSVR Broker API. Omdat het een Nederlands domein      betreft worden er Engelse en Nederlandse terminologie door elkaar heen gebruikt.  Liefhebbers van de Swagger UI kunnen [hier terecht](/swagger-ui). Daarnaast is de API eveneens beschikbaar in de op endpoint niveau zoals bijvoorbeeld [hier](/api/aansluitingen).  ##        

API version: release-0.6.14
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package broker

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"time"
)


// MeldingenApiService MeldingenApi service
type MeldingenApiService service

type ApiMeldingenListRequest struct {
	ctx context.Context
	ApiService *MeldingenApiService
	actueel *bool
	createdAfter *time.Time
	createdBefore *time.Time
	criterium *int32
	limit *int32
	modifiedAfter *time.Time
	modifiedBefore *time.Time
	offset *int32
	toestand *int32
}

func (r ApiMeldingenListRequest) Actueel(actueel bool) ApiMeldingenListRequest {
	r.actueel = &actueel
	return r
}

func (r ApiMeldingenListRequest) CreatedAfter(createdAfter time.Time) ApiMeldingenListRequest {
	r.createdAfter = &createdAfter
	return r
}

func (r ApiMeldingenListRequest) CreatedBefore(createdBefore time.Time) ApiMeldingenListRequest {
	r.createdBefore = &createdBefore
	return r
}

func (r ApiMeldingenListRequest) Criterium(criterium int32) ApiMeldingenListRequest {
	r.criterium = &criterium
	return r
}

// Number of results to return per page.
func (r ApiMeldingenListRequest) Limit(limit int32) ApiMeldingenListRequest {
	r.limit = &limit
	return r
}

func (r ApiMeldingenListRequest) ModifiedAfter(modifiedAfter time.Time) ApiMeldingenListRequest {
	r.modifiedAfter = &modifiedAfter
	return r
}

func (r ApiMeldingenListRequest) ModifiedBefore(modifiedBefore time.Time) ApiMeldingenListRequest {
	r.modifiedBefore = &modifiedBefore
	return r
}

// The initial index from which to return the results.
func (r ApiMeldingenListRequest) Offset(offset int32) ApiMeldingenListRequest {
	r.offset = &offset
	return r
}

// 0 &#x3D; Actief, 1 &#x3D; Test, 2 &#x3D; Passief
func (r ApiMeldingenListRequest) Toestand(toestand int32) ApiMeldingenListRequest {
	r.toestand = &toestand
	return r
}

func (r ApiMeldingenListRequest) Execute() (*PaginatedMeldingList, *http.Response, error) {
	return r.ApiService.MeldingenListExecute(r)
}

/*
MeldingenList Method for MeldingenList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeldingenListRequest
*/
func (a *MeldingenApiService) MeldingenList(ctx context.Context) ApiMeldingenListRequest {
	return ApiMeldingenListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedMeldingList
func (a *MeldingenApiService) MeldingenListExecute(r ApiMeldingenListRequest) (*PaginatedMeldingList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedMeldingList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeldingenApiService.MeldingenList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/meldingen"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.actueel != nil {
		localVarQueryParams.Add("actueel", parameterToString(*r.actueel, ""))
	}
	if r.createdAfter != nil {
		localVarQueryParams.Add("created_after", parameterToString(*r.createdAfter, ""))
	}
	if r.createdBefore != nil {
		localVarQueryParams.Add("created_before", parameterToString(*r.createdBefore, ""))
	}
	if r.criterium != nil {
		localVarQueryParams.Add("criterium", parameterToString(*r.criterium, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.modifiedAfter != nil {
		localVarQueryParams.Add("modified_after", parameterToString(*r.modifiedAfter, ""))
	}
	if r.modifiedBefore != nil {
		localVarQueryParams.Add("modified_before", parameterToString(*r.modifiedBefore, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.toestand != nil {
		localVarQueryParams.Add("toestand", parameterToString(*r.toestand, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
