/*
AMSVR Broker API

# Introductie     Voor u heeft u de online documentatie van de AMSVR Broker API. Omdat het een Nederlands domein      betreft worden er Engelse en Nederlandse terminologie door elkaar heen gebruikt.  Liefhebbers van de Swagger UI kunnen [hier terecht](/swagger-ui). Daarnaast is de API eveneens beschikbaar in de op endpoint niveau zoals bijvoorbeeld [hier](/api/aansluitingen).  ##        

API version: release-0.6.14
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package broker

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// AanwezigeCriteriaApiService AanwezigeCriteriaApi service
type AanwezigeCriteriaApiService service

type ApiAansluitingenAanwezigeCriteriaDestroyRequest struct {
	ctx context.Context
	ApiService *AanwezigeCriteriaApiService
	id int32
}

func (r ApiAansluitingenAanwezigeCriteriaDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.AansluitingenAanwezigeCriteriaDestroyExecute(r)
}

/*
AansluitingenAanwezigeCriteriaDestroy Method for AansluitingenAanwezigeCriteriaDestroy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAansluitingenAanwezigeCriteriaDestroyRequest
*/
func (a *AanwezigeCriteriaApiService) AansluitingenAanwezigeCriteriaDestroy(ctx context.Context, id int32) ApiAansluitingenAanwezigeCriteriaDestroyRequest {
	return ApiAansluitingenAanwezigeCriteriaDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AanwezigeCriteriaApiService) AansluitingenAanwezigeCriteriaDestroyExecute(r ApiAansluitingenAanwezigeCriteriaDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AanwezigeCriteriaApiService.AansluitingenAanwezigeCriteriaDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/aansluitingen/aanwezige-criteria/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAansluitingenAanwezigeCriteriaPartialUpdateRequest struct {
	ctx context.Context
	ApiService *AanwezigeCriteriaApiService
	id int32
	patchedAanwezigCriteriumRequest *PatchedAanwezigCriteriumRequest
}

func (r ApiAansluitingenAanwezigeCriteriaPartialUpdateRequest) PatchedAanwezigCriteriumRequest(patchedAanwezigCriteriumRequest PatchedAanwezigCriteriumRequest) ApiAansluitingenAanwezigeCriteriaPartialUpdateRequest {
	r.patchedAanwezigCriteriumRequest = &patchedAanwezigCriteriumRequest
	return r
}

func (r ApiAansluitingenAanwezigeCriteriaPartialUpdateRequest) Execute() (*AanwezigCriterium, *http.Response, error) {
	return r.ApiService.AansluitingenAanwezigeCriteriaPartialUpdateExecute(r)
}

/*
AansluitingenAanwezigeCriteriaPartialUpdate Method for AansluitingenAanwezigeCriteriaPartialUpdate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAansluitingenAanwezigeCriteriaPartialUpdateRequest
*/
func (a *AanwezigeCriteriaApiService) AansluitingenAanwezigeCriteriaPartialUpdate(ctx context.Context, id int32) ApiAansluitingenAanwezigeCriteriaPartialUpdateRequest {
	return ApiAansluitingenAanwezigeCriteriaPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AanwezigCriterium
func (a *AanwezigeCriteriaApiService) AansluitingenAanwezigeCriteriaPartialUpdateExecute(r ApiAansluitingenAanwezigeCriteriaPartialUpdateRequest) (*AanwezigCriterium, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AanwezigCriterium
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AanwezigeCriteriaApiService.AansluitingenAanwezigeCriteriaPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/aansluitingen/aanwezige-criteria/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedAanwezigCriteriumRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAansluitingenAanwezigeCriteriaRetrieveRequest struct {
	ctx context.Context
	ApiService *AanwezigeCriteriaApiService
	id int32
}

func (r ApiAansluitingenAanwezigeCriteriaRetrieveRequest) Execute() (*AanwezigCriterium, *http.Response, error) {
	return r.ApiService.AansluitingenAanwezigeCriteriaRetrieveExecute(r)
}

/*
AansluitingenAanwezigeCriteriaRetrieve Method for AansluitingenAanwezigeCriteriaRetrieve

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAansluitingenAanwezigeCriteriaRetrieveRequest
*/
func (a *AanwezigeCriteriaApiService) AansluitingenAanwezigeCriteriaRetrieve(ctx context.Context, id int32) ApiAansluitingenAanwezigeCriteriaRetrieveRequest {
	return ApiAansluitingenAanwezigeCriteriaRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AanwezigCriterium
func (a *AanwezigeCriteriaApiService) AansluitingenAanwezigeCriteriaRetrieveExecute(r ApiAansluitingenAanwezigeCriteriaRetrieveRequest) (*AanwezigCriterium, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AanwezigCriterium
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AanwezigeCriteriaApiService.AansluitingenAanwezigeCriteriaRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/aansluitingen/aanwezige-criteria/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAansluitingenAanwezigeCriteriaUpdateRequest struct {
	ctx context.Context
	ApiService *AanwezigeCriteriaApiService
	id int32
	aanwezigCriteriumRequest *AanwezigCriteriumRequest
}

func (r ApiAansluitingenAanwezigeCriteriaUpdateRequest) AanwezigCriteriumRequest(aanwezigCriteriumRequest AanwezigCriteriumRequest) ApiAansluitingenAanwezigeCriteriaUpdateRequest {
	r.aanwezigCriteriumRequest = &aanwezigCriteriumRequest
	return r
}

func (r ApiAansluitingenAanwezigeCriteriaUpdateRequest) Execute() (*AanwezigCriterium, *http.Response, error) {
	return r.ApiService.AansluitingenAanwezigeCriteriaUpdateExecute(r)
}

/*
AansluitingenAanwezigeCriteriaUpdate Method for AansluitingenAanwezigeCriteriaUpdate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAansluitingenAanwezigeCriteriaUpdateRequest
*/
func (a *AanwezigeCriteriaApiService) AansluitingenAanwezigeCriteriaUpdate(ctx context.Context, id int32) ApiAansluitingenAanwezigeCriteriaUpdateRequest {
	return ApiAansluitingenAanwezigeCriteriaUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AanwezigCriterium
func (a *AanwezigeCriteriaApiService) AansluitingenAanwezigeCriteriaUpdateExecute(r ApiAansluitingenAanwezigeCriteriaUpdateRequest) (*AanwezigCriterium, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AanwezigCriterium
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AanwezigeCriteriaApiService.AansluitingenAanwezigeCriteriaUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/aansluitingen/aanwezige-criteria/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.aanwezigCriteriumRequest == nil {
		return localVarReturnValue, nil, reportError("aanwezigCriteriumRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.aanwezigCriteriumRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAansluitingenSectorenAanwezigeCriteriaCreateRequest struct {
	ctx context.Context
	ApiService *AanwezigeCriteriaApiService
	id int32
	aanwezigCriteriumRequest *AanwezigCriteriumRequest
}

func (r ApiAansluitingenSectorenAanwezigeCriteriaCreateRequest) AanwezigCriteriumRequest(aanwezigCriteriumRequest AanwezigCriteriumRequest) ApiAansluitingenSectorenAanwezigeCriteriaCreateRequest {
	r.aanwezigCriteriumRequest = &aanwezigCriteriumRequest
	return r
}

func (r ApiAansluitingenSectorenAanwezigeCriteriaCreateRequest) Execute() (*AanwezigCriterium, *http.Response, error) {
	return r.ApiService.AansluitingenSectorenAanwezigeCriteriaCreateExecute(r)
}

/*
AansluitingenSectorenAanwezigeCriteriaCreate Method for AansluitingenSectorenAanwezigeCriteriaCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAansluitingenSectorenAanwezigeCriteriaCreateRequest
*/
func (a *AanwezigeCriteriaApiService) AansluitingenSectorenAanwezigeCriteriaCreate(ctx context.Context, id int32) ApiAansluitingenSectorenAanwezigeCriteriaCreateRequest {
	return ApiAansluitingenSectorenAanwezigeCriteriaCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AanwezigCriterium
func (a *AanwezigeCriteriaApiService) AansluitingenSectorenAanwezigeCriteriaCreateExecute(r ApiAansluitingenSectorenAanwezigeCriteriaCreateRequest) (*AanwezigCriterium, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AanwezigCriterium
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AanwezigeCriteriaApiService.AansluitingenSectorenAanwezigeCriteriaCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/aansluitingen/sectoren/{id}/aanwezige-criteria"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.aanwezigCriteriumRequest == nil {
		return localVarReturnValue, nil, reportError("aanwezigCriteriumRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.aanwezigCriteriumRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAansluitingenSectorenAanwezigeCriteriaListRequest struct {
	ctx context.Context
	ApiService *AanwezigeCriteriaApiService
	id int32
	limit *int32
	offset *int32
}

// Number of results to return per page.
func (r ApiAansluitingenSectorenAanwezigeCriteriaListRequest) Limit(limit int32) ApiAansluitingenSectorenAanwezigeCriteriaListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiAansluitingenSectorenAanwezigeCriteriaListRequest) Offset(offset int32) ApiAansluitingenSectorenAanwezigeCriteriaListRequest {
	r.offset = &offset
	return r
}

func (r ApiAansluitingenSectorenAanwezigeCriteriaListRequest) Execute() (*PaginatedAanwezigCriteriumList, *http.Response, error) {
	return r.ApiService.AansluitingenSectorenAanwezigeCriteriaListExecute(r)
}

/*
AansluitingenSectorenAanwezigeCriteriaList Method for AansluitingenSectorenAanwezigeCriteriaList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAansluitingenSectorenAanwezigeCriteriaListRequest
*/
func (a *AanwezigeCriteriaApiService) AansluitingenSectorenAanwezigeCriteriaList(ctx context.Context, id int32) ApiAansluitingenSectorenAanwezigeCriteriaListRequest {
	return ApiAansluitingenSectorenAanwezigeCriteriaListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedAanwezigCriteriumList
func (a *AanwezigeCriteriaApiService) AansluitingenSectorenAanwezigeCriteriaListExecute(r ApiAansluitingenSectorenAanwezigeCriteriaListRequest) (*PaginatedAanwezigCriteriumList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedAanwezigCriteriumList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AanwezigeCriteriaApiService.AansluitingenSectorenAanwezigeCriteriaList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/aansluitingen/sectoren/{id}/aanwezige-criteria"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
