/*
AMSVR Broker API

# Introductie     Voor u heeft u de online documentatie van de AMSVR Broker API. Omdat het een Nederlands domein      betreft worden er Engelse en Nederlandse terminologie door elkaar heen gebruikt.  Liefhebbers van de Swagger UI kunnen [hier terecht](/swagger-ui). Daarnaast is de API eveneens beschikbaar in de op endpoint niveau zoals bijvoorbeeld [hier](/api/aansluitingen).  ##        

API version: release-0.6.14
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package broker

import (
	"encoding/json"
	"fmt"
)

// AfsluitingZaakStatusEnum the model 'AfsluitingZaakStatusEnum'
type AfsluitingZaakStatusEnum string

// List of AfsluitingZaakStatusEnum
const (
	AFSLUITINGZAAKSTATUSENUM_NIEUW AfsluitingZaakStatusEnum = "nieuw"
	AFSLUITINGZAAKSTATUSENUM_INGEDIEND AfsluitingZaakStatusEnum = "ingediend"
	AFSLUITINGZAAKSTATUSENUM_AFGEWEZEN AfsluitingZaakStatusEnum = "afgewezen"
	AFSLUITINGZAAKSTATUSENUM_GOEDGEKEURD AfsluitingZaakStatusEnum = "goedgekeurd"
	AFSLUITINGZAAKSTATUSENUM_BEVESTIGD AfsluitingZaakStatusEnum = "bevestigd"
	AFSLUITINGZAAKSTATUSENUM_UITGEVOERD AfsluitingZaakStatusEnum = "uitgevoerd"
	AFSLUITINGZAAKSTATUSENUM_VERWIJDERD AfsluitingZaakStatusEnum = "verwijderd"
	AFSLUITINGZAAKSTATUSENUM_GEANNULEERD AfsluitingZaakStatusEnum = "geannuleerd"
)

// All allowed values of AfsluitingZaakStatusEnum enum
var AllowedAfsluitingZaakStatusEnumEnumValues = []AfsluitingZaakStatusEnum{
	"nieuw",
	"ingediend",
	"afgewezen",
	"goedgekeurd",
	"bevestigd",
	"uitgevoerd",
	"verwijderd",
	"geannuleerd",
}

func (v *AfsluitingZaakStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AfsluitingZaakStatusEnum(value)
	for _, existing := range AllowedAfsluitingZaakStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AfsluitingZaakStatusEnum", value)
}

// NewAfsluitingZaakStatusEnumFromValue returns a pointer to a valid AfsluitingZaakStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAfsluitingZaakStatusEnumFromValue(v string) (*AfsluitingZaakStatusEnum, error) {
	ev := AfsluitingZaakStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AfsluitingZaakStatusEnum: valid values are %v", v, AllowedAfsluitingZaakStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AfsluitingZaakStatusEnum) IsValid() bool {
	for _, existing := range AllowedAfsluitingZaakStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AfsluitingZaakStatusEnum value
func (v AfsluitingZaakStatusEnum) Ptr() *AfsluitingZaakStatusEnum {
	return &v
}

type NullableAfsluitingZaakStatusEnum struct {
	value *AfsluitingZaakStatusEnum
	isSet bool
}

func (v NullableAfsluitingZaakStatusEnum) Get() *AfsluitingZaakStatusEnum {
	return v.value
}

func (v *NullableAfsluitingZaakStatusEnum) Set(val *AfsluitingZaakStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAfsluitingZaakStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAfsluitingZaakStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAfsluitingZaakStatusEnum(val *AfsluitingZaakStatusEnum) *NullableAfsluitingZaakStatusEnum {
	return &NullableAfsluitingZaakStatusEnum{value: val, isSet: true}
}

func (v NullableAfsluitingZaakStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAfsluitingZaakStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

