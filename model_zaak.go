/*
AMSVR Broker API

# Introductie     Voor u heeft u de online documentatie van de AMSVR Broker API. Omdat het een Nederlands domein      betreft worden er Engelse en Nederlandse terminologie door elkaar heen gebruikt.  Liefhebbers van de Swagger UI kunnen [hier terecht](/swagger-ui). Daarnaast is de API eveneens beschikbaar in de op endpoint niveau zoals bijvoorbeeld [hier](/api/aansluitingen).  ##        

API version: release-0.6.14
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package broker

import (
	"encoding/json"
)

// Zaak struct for Zaak
type Zaak struct {
	Id int32 `json:"id"`
	Type string `json:"type"`
}

// NewZaak instantiates a new Zaak object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZaak(id int32, type_ string) *Zaak {
	this := Zaak{}
	this.Id = id
	this.Type = type_
	return &this
}

// NewZaakWithDefaults instantiates a new Zaak object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZaakWithDefaults() *Zaak {
	this := Zaak{}
	return &this
}

// GetId returns the Id field value
func (o *Zaak) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Zaak) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Zaak) SetId(v int32) {
	o.Id = v
}

// GetType returns the Type field value
func (o *Zaak) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Zaak) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Zaak) SetType(v string) {
	o.Type = v
}

func (o Zaak) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableZaak struct {
	value *Zaak
	isSet bool
}

func (v NullableZaak) Get() *Zaak {
	return v.value
}

func (v *NullableZaak) Set(val *Zaak) {
	v.value = val
	v.isSet = true
}

func (v NullableZaak) IsSet() bool {
	return v.isSet
}

func (v *NullableZaak) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZaak(val *Zaak) *NullableZaak {
	return &NullableZaak{value: val, isSet: true}
}

func (v NullableZaak) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZaak) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


