/*
AMSVR Broker API

# Introductie     Voor u heeft u de online documentatie van de AMSVR Broker API. Omdat het een Nederlands domein      betreft worden er Engelse en Nederlandse terminologie door elkaar heen gebruikt.  Liefhebbers van de Swagger UI kunnen [hier terecht](/swagger-ui). Daarnaast is de API eveneens beschikbaar in de op endpoint niveau zoals bijvoorbeeld [hier](/api/aansluitingen).  ##        

API version: release-0.6.14
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package broker

import (
	"encoding/json"
	"fmt"
)

// AansluitingBestandTypeEnum the model 'AansluitingBestandTypeEnum'
type AansluitingBestandTypeEnum string

// List of AansluitingBestandTypeEnum
const (
	AANSLUITINGBESTANDTYPEENUM_OVERIGE AansluitingBestandTypeEnum = "overige"
	AANSLUITINGBESTANDTYPEENUM_PVE AansluitingBestandTypeEnum = "pve"
	AANSLUITINGBESTANDTYPEENUM_UPD AansluitingBestandTypeEnum = "upd"
	AANSLUITINGBESTANDTYPEENUM_NVA AansluitingBestandTypeEnum = "nva"
	AANSLUITINGBESTANDTYPEENUM_NVW AansluitingBestandTypeEnum = "nvw"
	AANSLUITINGBESTANDTYPEENUM_GMS_MUTATIERAPPORT AansluitingBestandTypeEnum = "gms_mutatierapport"
)

// All allowed values of AansluitingBestandTypeEnum enum
var AllowedAansluitingBestandTypeEnumEnumValues = []AansluitingBestandTypeEnum{
	"overige",
	"pve",
	"upd",
	"nva",
	"nvw",
	"gms_mutatierapport",
}

func (v *AansluitingBestandTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AansluitingBestandTypeEnum(value)
	for _, existing := range AllowedAansluitingBestandTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AansluitingBestandTypeEnum", value)
}

// NewAansluitingBestandTypeEnumFromValue returns a pointer to a valid AansluitingBestandTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAansluitingBestandTypeEnumFromValue(v string) (*AansluitingBestandTypeEnum, error) {
	ev := AansluitingBestandTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AansluitingBestandTypeEnum: valid values are %v", v, AllowedAansluitingBestandTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AansluitingBestandTypeEnum) IsValid() bool {
	for _, existing := range AllowedAansluitingBestandTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AansluitingBestandTypeEnum value
func (v AansluitingBestandTypeEnum) Ptr() *AansluitingBestandTypeEnum {
	return &v
}

type NullableAansluitingBestandTypeEnum struct {
	value *AansluitingBestandTypeEnum
	isSet bool
}

func (v NullableAansluitingBestandTypeEnum) Get() *AansluitingBestandTypeEnum {
	return v.value
}

func (v *NullableAansluitingBestandTypeEnum) Set(val *AansluitingBestandTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAansluitingBestandTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAansluitingBestandTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAansluitingBestandTypeEnum(val *AansluitingBestandTypeEnum) *NullableAansluitingBestandTypeEnum {
	return &NullableAansluitingBestandTypeEnum{value: val, isSet: true}
}

func (v NullableAansluitingBestandTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAansluitingBestandTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

