/*
AMSVR Broker API

# Introductie     Voor u heeft u de online documentatie van de AMSVR Broker API. Omdat het een Nederlands domein      betreft worden er Engelse en Nederlandse terminologie door elkaar heen gebruikt.  Liefhebbers van de Swagger UI kunnen [hier terecht](/swagger-ui). Daarnaast is de API eveneens beschikbaar in de op endpoint niveau zoals bijvoorbeeld [hier](/api/aansluitingen).  ##        

API version: release-0.6.14
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package broker

import (
	"encoding/json"
	"fmt"
)

// NieuweAansluitingZaakStatusEnum the model 'NieuweAansluitingZaakStatusEnum'
type NieuweAansluitingZaakStatusEnum string

// List of NieuweAansluitingZaakStatusEnum
const (
	NIEUWEAANSLUITINGZAAKSTATUSENUM_NIEUW NieuweAansluitingZaakStatusEnum = "nieuw"
	NIEUWEAANSLUITINGZAAKSTATUSENUM_INGEDIEND NieuweAansluitingZaakStatusEnum = "ingediend"
	NIEUWEAANSLUITINGZAAKSTATUSENUM_AFGEKEURD NieuweAansluitingZaakStatusEnum = "afgekeurd"
	NIEUWEAANSLUITINGZAAKSTATUSENUM_REALISATIE NieuweAansluitingZaakStatusEnum = "realisatie"
	NIEUWEAANSLUITINGZAAKSTATUSENUM_GMS_DOORGEVOERD NieuweAansluitingZaakStatusEnum = "gms_doorgevoerd"
	NIEUWEAANSLUITINGZAAKSTATUSENUM_TECHNISCH_GEREED NieuweAansluitingZaakStatusEnum = "technisch_gereed"
	NIEUWEAANSLUITINGZAAKSTATUSENUM_GOEDGEKEURD NieuweAansluitingZaakStatusEnum = "goedgekeurd"
	NIEUWEAANSLUITINGZAAKSTATUSENUM_OPGELEVERD NieuweAansluitingZaakStatusEnum = "opgeleverd"
	NIEUWEAANSLUITINGZAAKSTATUSENUM_GEANNULEERD NieuweAansluitingZaakStatusEnum = "geannuleerd"
)

// All allowed values of NieuweAansluitingZaakStatusEnum enum
var AllowedNieuweAansluitingZaakStatusEnumEnumValues = []NieuweAansluitingZaakStatusEnum{
	"nieuw",
	"ingediend",
	"afgekeurd",
	"realisatie",
	"gms_doorgevoerd",
	"technisch_gereed",
	"goedgekeurd",
	"opgeleverd",
	"geannuleerd",
}

func (v *NieuweAansluitingZaakStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NieuweAansluitingZaakStatusEnum(value)
	for _, existing := range AllowedNieuweAansluitingZaakStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NieuweAansluitingZaakStatusEnum", value)
}

// NewNieuweAansluitingZaakStatusEnumFromValue returns a pointer to a valid NieuweAansluitingZaakStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNieuweAansluitingZaakStatusEnumFromValue(v string) (*NieuweAansluitingZaakStatusEnum, error) {
	ev := NieuweAansluitingZaakStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NieuweAansluitingZaakStatusEnum: valid values are %v", v, AllowedNieuweAansluitingZaakStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NieuweAansluitingZaakStatusEnum) IsValid() bool {
	for _, existing := range AllowedNieuweAansluitingZaakStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NieuweAansluitingZaakStatusEnum value
func (v NieuweAansluitingZaakStatusEnum) Ptr() *NieuweAansluitingZaakStatusEnum {
	return &v
}

type NullableNieuweAansluitingZaakStatusEnum struct {
	value *NieuweAansluitingZaakStatusEnum
	isSet bool
}

func (v NullableNieuweAansluitingZaakStatusEnum) Get() *NieuweAansluitingZaakStatusEnum {
	return v.value
}

func (v *NullableNieuweAansluitingZaakStatusEnum) Set(val *NieuweAansluitingZaakStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableNieuweAansluitingZaakStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableNieuweAansluitingZaakStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNieuweAansluitingZaakStatusEnum(val *NieuweAansluitingZaakStatusEnum) *NullableNieuweAansluitingZaakStatusEnum {
	return &NullableNieuweAansluitingZaakStatusEnum{value: val, isSet: true}
}

func (v NullableNieuweAansluitingZaakStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNieuweAansluitingZaakStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

